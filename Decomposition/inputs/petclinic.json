{"Data":[{"Variables":[{"VariableName":"baseDirectory"},{"VariableName":"mavenWrapperPropertyFile"},{"VariableName":"url"},{"VariableName":"mavenWrapperPropertyFileInputStream"},{"VariableName":"mavenWrapperProperties"},{"VariableName":"outputFile"}],"Methodscalled":[{"MethodCalled":"downloadFileFromURL"}],"Parameters":["args"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"MavenWrapperDownloader","MethodName":"main","MethodSourceCode":"public static void main(String[] args) {\n    System.out.println(\"- Downloader started\");\n    File baseDirectory = new File(args[0]);\n    System.out.println(\"- Using base directory: \" + baseDirectory.getAbsolutePath());\n    // If the maven-wrapper.properties exists, read it and check if it contains a custom\n    // wrapperUrl parameter.\n    File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);\n    String url = DEFAULT_DOWNLOAD_URL;\n    if (mavenWrapperPropertyFile.exists()) {\n        FileInputStream mavenWrapperPropertyFileInputStream = null;\n        try {\n            mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);\n            Properties mavenWrapperProperties = new Properties();\n            mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);\n            url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);\n        } catch (IOException e) {\n            System.out.println(\"- ERROR loading '\" + MAVEN_WRAPPER_PROPERTIES_PATH + \"'\");\n        } finally {\n            try {\n                if (mavenWrapperPropertyFileInputStream != null) {\n                    mavenWrapperPropertyFileInputStream.close();\n                }\n            } catch (IOException e) {\n                // Ignore ...\n            }\n        }\n    }\n    System.out.println(\"- Downloading from: \" + url);\n    File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);\n    if (!outputFile.getParentFile().exists()) {\n        if (!outputFile.getParentFile().mkdirs()) {\n            System.out.println(\"- ERROR creating output directory '\" + outputFile.getParentFile().getAbsolutePath() + \"'\");\n        }\n    }\n    System.out.println(\"- Downloading to: \" + outputFile.getAbsolutePath());\n    try {\n        downloadFileFromURL(url, outputFile);\n        System.out.println(\"Done\");\n        System.exit(0);\n    } catch (Throwable e) {\n        System.out.println(\"- Error downloading\");\n        e.printStackTrace();\n        System.exit(1);\n    }\n}","Folder":".mvn"},{"Variables":[{"VariableName":"username"},{"VariableName":"password"},{"VariableName":"website"},{"VariableName":"rbc"},{"VariableName":"fos"}],"Methodscalled":[],"Parameters":["urlString","destination"],"ASTFeatures":["MethodDeclaration","MethodDeclaration"],"Comments":"","ClassName":"MavenWrapperDownloader","MethodName":"downloadFileFromURL","MethodSourceCode":"private static void downloadFileFromURL(String urlString, File destination) throws Exception {\n    if (System.getenv(\"MVNW_USERNAME\") != null && System.getenv(\"MVNW_PASSWORD\") != null) {\n        String username = System.getenv(\"MVNW_USERNAME\");\n        char[] password = System.getenv(\"MVNW_PASSWORD\").toCharArray();\n        Authenticator.setDefault(new Authenticator() {\n\n            @Override\n            protected PasswordAuthentication getPasswordAuthentication() {\n                return new PasswordAuthentication(username, password);\n            }\n        });\n    }\n    URL website = new URL(urlString);\n    ReadableByteChannel rbc;\n    rbc = Channels.newChannel(website.openStream());\n    FileOutputStream fos = new FileOutputStream(destination);\n    fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);\n    fos.close();\n    rbc.close();\n}","Folder":".mvn"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"MavenWrapperDownloader","MethodName":"getPasswordAuthentication","MethodSourceCode":"@Override\nprotected PasswordAuthentication getPasswordAuthentication() {\n    return new PasswordAuthentication(username, password);\n}","Folder":".mvn"},{"Variables":[],"Methodscalled":[],"Parameters":["args"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"SpringBootAdminApplication","MethodName":"main","MethodSourceCode":"public static void main(String[] args) {\n    SpringApplication.run(SpringBootAdminApplication.class, args);\n}","Folder":"spring-petclinic-admin-server"},{"Variables":[],"Methodscalled":[],"Parameters":["args"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ApiGatewayApplication","MethodName":"main","MethodSourceCode":"public static void main(String[] args) {\n    SpringApplication.run(ApiGatewayApplication.class, args);\n}","Folder":"spring-petclinic-api-gateway"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ApiGatewayApplication","MethodName":"loadBalancedRestTemplate","MethodSourceCode":"@Bean\n@LoadBalanced\nRestTemplate loadBalancedRestTemplate() {\n    return new RestTemplate();\n}","Folder":"spring-petclinic-api-gateway"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ApiGatewayApplication","MethodName":"loadBalancedWebClientBuilder","MethodSourceCode":"@Bean\n@LoadBalanced\npublic WebClient.Builder loadBalancedWebClientBuilder() {\n    return WebClient.builder();\n}","Folder":"spring-petclinic-api-gateway"},{"Variables":[{"VariableName":"router"}],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"\n     * workaround solution for forwarding to index.html\n     * @see <a href=\"https://github.com/spring-projects/spring-boot/issues/9785\">#9785<\/a>\n     ","ClassName":"ApiGatewayApplication","MethodName":"routerFunction","MethodSourceCode":"/**\n * workaround solution for forwarding to index.html\n * @see <a href=\"https://github.com/spring-projects/spring-boot/issues/9785\">#9785<\/a>\n */\n@Bean\nRouterFunction<?> routerFunction() {\n    RouterFunction router = RouterFunctions.resources(\"/**\", new ClassPathResource(\"static/\")).andRoute(RequestPredicates.GET(\"/\"), request -> ServerResponse.ok().contentType(MediaType.TEXT_HTML).bodyValue(indexHtml));\n    return router;\n}","Folder":"spring-petclinic-api-gateway"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"\n     * Default Resilience4j circuit breaker configuration\n     ","ClassName":"ApiGatewayApplication","MethodName":"defaultCustomizer","MethodSourceCode":"/**\n * Default Resilience4j circuit breaker configuration\n */\n@Bean\npublic Customizer<ReactiveResilience4JCircuitBreakerFactory> defaultCustomizer() {\n    return factory -> factory.configureDefault(id -> new Resilience4JConfigBuilder(id).circuitBreakerConfig(CircuitBreakerConfig.ofDefaults()).timeLimiterConfig(TimeLimiterConfig.custom().timeoutDuration(Duration.ofSeconds(4)).build()).build());\n}","Folder":"spring-petclinic-api-gateway"},{"Variables":[],"Methodscalled":[],"Parameters":["ownerId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"CustomersServiceClient","MethodName":"getOwner","MethodSourceCode":"public Mono<OwnerDetails> getOwner(final int ownerId) {\n    return webClientBuilder.build().get().uri(\"http://customers-service/owners/{ownerId}\", ownerId).retrieve().bodyToMono(OwnerDetails.class);\n}","Folder":"spring-petclinic-api-gateway"},{"Variables":[],"Methodscalled":[{"MethodCalled":"joinIds"}],"Parameters":["petIds"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"VisitsServiceClient","MethodName":"getVisitsForPets","MethodSourceCode":"public Mono<Visits> getVisitsForPets(final List<Integer> petIds) {\n    return webClientBuilder.build().get().uri(hostname + \"pets/visits?petId={petId}\", joinIds(petIds)).retrieve().bodyToMono(Visits.class);\n}","Folder":"spring-petclinic-api-gateway"},{"Variables":[],"Methodscalled":[],"Parameters":["petIds"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"VisitsServiceClient","MethodName":"joinIds","MethodSourceCode":"private String joinIds(List<Integer> petIds) {\n    return petIds.stream().map(Object::toString).collect(joining(\",\"));\n}","Folder":"spring-petclinic-api-gateway"},{"Variables":[],"Methodscalled":[],"Parameters":["hostname"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"VisitsServiceClient","MethodName":"setHostname","MethodSourceCode":"void setHostname(String hostname) {\n    this.hostname = hostname;\n}","Folder":"spring-petclinic-api-gateway"},{"Variables":[{"VariableName":"cb"}],"Methodscalled":[{"MethodCalled":"emptyVisitsForPets"},{"MethodCalled":"addVisitsToOwner"}],"Parameters":["ownerId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ApiGatewayController","MethodName":"getOwnerDetails","MethodSourceCode":"@GetMapping(value = \"owners/{ownerId}\")\npublic Mono<OwnerDetails> getOwnerDetails(@PathVariable final int ownerId) {\n    return customersServiceClient.getOwner(ownerId).flatMap(owner -> visitsServiceClient.getVisitsForPets(owner.getPetIds()).transform(it -> {\n        ReactiveCircuitBreaker cb = cbFactory.create(\"getOwnerDetails\");\n        return cb.run(it, throwable -> emptyVisitsForPets());\n    }).map(addVisitsToOwner(owner)));\n}","Folder":"spring-petclinic-api-gateway"},{"Variables":[],"Methodscalled":[],"Parameters":["owner"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ApiGatewayController","MethodName":"addVisitsToOwner","MethodSourceCode":"private Function<Visits, OwnerDetails> addVisitsToOwner(OwnerDetails owner) {\n    return visits -> {\n        owner.getPets().forEach(pet -> pet.getVisits().addAll(visits.getItems().stream().filter(v -> v.getPetId() == pet.getId()).collect(Collectors.toList())));\n        return owner;\n    };\n}","Folder":"spring-petclinic-api-gateway"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ApiGatewayController","MethodName":"emptyVisitsForPets","MethodSourceCode":"private Mono<Visits> emptyVisitsForPets() {\n    return Mono.just(new Visits());\n}","Folder":"spring-petclinic-api-gateway"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"OwnerDetails","MethodName":"getPetIds","MethodSourceCode":"@JsonIgnore\npublic List<Integer> getPetIds() {\n    return pets.stream().map(PetDetails::getId).collect(toList());\n}","Folder":"spring-petclinic-api-gateway"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ApiGatewayApplicationTests","MethodName":"contextLoads","MethodSourceCode":"@Test\nvoid contextLoads() {\n}","Folder":"spring-petclinic-api-gateway"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"VisitsServiceClientIntegrationTest","MethodName":"setUp","MethodSourceCode":"@BeforeEach\nvoid setUp() {\n    server = new MockWebServer();\n    visitsServiceClient = new VisitsServiceClient(WebClient.builder());\n    visitsServiceClient.setHostname(server.url(\"/\").toString());\n}","Folder":"spring-petclinic-api-gateway"},{"Variables":[],"Methodscalled":[{"MethodCalled":"shutdown"}],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"VisitsServiceClientIntegrationTest","MethodName":"shutdown","MethodSourceCode":"@AfterEach\nvoid shutdown() throws IOException {\n    this.server.shutdown();\n}","Folder":"spring-petclinic-api-gateway"},{"Variables":[{"VariableName":"visits"}],"Methodscalled":[{"MethodCalled":"prepareResponse"},{"MethodCalled":"assertVisitDescriptionEquals"}],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"VisitsServiceClientIntegrationTest","MethodName":"getVisitsForPets_withAvailableVisitsService","MethodSourceCode":"@Test\nvoid getVisitsForPets_withAvailableVisitsService() {\n    prepareResponse(response -> response.setHeader(\"Content-Type\", \"application/json\").setBody(\"{\\\"items\\\":[{\\\"id\\\":5,\\\"date\\\":\\\"2018-11-15\\\",\\\"description\\\":\\\"test visit\\\",\\\"petId\\\":1}]}\"));\n    Mono<Visits> visits = visitsServiceClient.getVisitsForPets(Collections.singletonList(1));\n    assertVisitDescriptionEquals(visits.block(), PET_ID, \"test visit\");\n}","Folder":"spring-petclinic-api-gateway"},{"Variables":[],"Methodscalled":[],"Parameters":["visits","petId","description"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"VisitsServiceClientIntegrationTest","MethodName":"assertVisitDescriptionEquals","MethodSourceCode":"private void assertVisitDescriptionEquals(Visits visits, int petId, String description) {\n    assertEquals(1, visits.getItems().size());\n    assertNotNull(visits.getItems().get(0));\n    assertEquals(petId, visits.getItems().get(0).getPetId());\n    assertEquals(description, visits.getItems().get(0).getDescription());\n}","Folder":"spring-petclinic-api-gateway"},{"Variables":[{"VariableName":"response"}],"Methodscalled":[],"Parameters":["consumer"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"VisitsServiceClientIntegrationTest","MethodName":"prepareResponse","MethodSourceCode":"private void prepareResponse(Consumer<MockResponse> consumer) {\n    MockResponse response = new MockResponse();\n    consumer.accept(response);\n    this.server.enqueue(response);\n}","Folder":"spring-petclinic-api-gateway"},{"Variables":[{"VariableName":"owner"},{"VariableName":"cat"},{"VariableName":"visits"},{"VariableName":"visit"}],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ApiGatewayControllerTest","MethodName":"getOwnerDetails_withAvailableVisitsService","MethodSourceCode":"@Test\nvoid getOwnerDetails_withAvailableVisitsService() {\n    OwnerDetails owner = new OwnerDetails();\n    PetDetails cat = new PetDetails();\n    cat.setId(20);\n    cat.setName(\"Garfield\");\n    owner.getPets().add(cat);\n    Mockito.when(customersServiceClient.getOwner(1)).thenReturn(Mono.just(owner));\n    Visits visits = new Visits();\n    VisitDetails visit = new VisitDetails();\n    visit.setId(300);\n    visit.setDescription(\"First visit\");\n    visit.setPetId(cat.getId());\n    visits.getItems().add(visit);\n    Mockito.when(visitsServiceClient.getVisitsForPets(Collections.singletonList(cat.getId()))).thenReturn(Mono.just(visits));\n    client.get().uri(\"/api/gateway/owners/1\").exchange().expectStatus().isOk().expectBody().jsonPath(\"$.pets[0].name\").isEqualTo(\"Garfield\").jsonPath(\"$.pets[0].visits[0].description\").isEqualTo(\"First visit\");\n}","Folder":"spring-petclinic-api-gateway"},{"Variables":[{"VariableName":"owner"},{"VariableName":"cat"}],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"\n     * Test Resilience4j fallback method\n     ","ClassName":"ApiGatewayControllerTest","MethodName":"getOwnerDetails_withServiceError","MethodSourceCode":"/**\n * Test Resilience4j fallback method\n */\n@Test\nvoid getOwnerDetails_withServiceError() {\n    OwnerDetails owner = new OwnerDetails();\n    PetDetails cat = new PetDetails();\n    cat.setId(20);\n    cat.setName(\"Garfield\");\n    owner.getPets().add(cat);\n    Mockito.when(customersServiceClient.getOwner(1)).thenReturn(Mono.just(owner));\n    Mockito.when(visitsServiceClient.getVisitsForPets(Collections.singletonList(cat.getId()))).thenReturn(Mono.error(new ConnectException(\"Simulate error\")));\n    client.get().uri(\"/api/gateway/owners/1\").exchange().expectStatus().isOk().expectBody().jsonPath(\"$.pets[0].name\").isEqualTo(\"Garfield\").jsonPath(\"$.pets[0].visits\").isEmpty();\n}","Folder":"spring-petclinic-api-gateway"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"CircuitBreakerConfiguration","MethodName":"circuitBreakerRegistry","MethodSourceCode":"@Bean\npublic CircuitBreakerRegistry circuitBreakerRegistry() {\n    return CircuitBreakerRegistry.ofDefaults();\n}","Folder":"spring-petclinic-api-gateway"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"CircuitBreakerConfiguration","MethodName":"timeLimiterRegistry","MethodSourceCode":"@Bean\npublic TimeLimiterRegistry timeLimiterRegistry() {\n    return TimeLimiterRegistry.ofDefaults();\n}","Folder":"spring-petclinic-api-gateway"},{"Variables":[],"Methodscalled":[],"Parameters":["args"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ConfigServerApplication","MethodName":"main","MethodSourceCode":"public static void main(String[] args) {\n    SpringApplication.run(ConfigServerApplication.class, args);\n}","Folder":"spring-petclinic-config-server"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"PetclinicConfigServerApplicationTests","MethodName":"contextLoads","MethodSourceCode":"@Test\nvoid contextLoads() {\n}","Folder":"spring-petclinic-config-server"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"MetricConfig","MethodName":"metricsCommonTags","MethodSourceCode":"@Bean\nMeterRegistryCustomizer<MeterRegistry> metricsCommonTags() {\n    return registry -> registry.config().commonTags(\"application\", \"petclinic\");\n}","Folder":"spring-petclinic-customers-service"},{"Variables":[],"Methodscalled":[],"Parameters":["registry"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"MetricConfig","MethodName":"timedAspect","MethodSourceCode":"@Bean\nTimedAspect timedAspect(MeterRegistry registry) {\n    return new TimedAspect(registry);\n}","Folder":"spring-petclinic-customers-service"},{"Variables":[],"Methodscalled":[],"Parameters":["args"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"CustomersServiceApplication","MethodName":"main","MethodSourceCode":"public static void main(String[] args) {\n    SpringApplication.run(CustomersServiceApplication.class, args);\n}","Folder":"spring-petclinic-customers-service"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Owner","MethodName":"getPetsInternal","MethodSourceCode":"protected Set<Pet> getPetsInternal() {\n    if (this.pets == null) {\n        this.pets = new HashSet<>();\n    }\n    return this.pets;\n}","Folder":"spring-petclinic-customers-service"},{"Variables":[{"VariableName":"sortedPets"}],"Methodscalled":[{"MethodCalled":"getPetsInternal"}],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Owner","MethodName":"getPets","MethodSourceCode":"public List<Pet> getPets() {\n    final List<Pet> sortedPets = new ArrayList<>(getPetsInternal());\n    PropertyComparator.sort(sortedPets, new MutableSortDefinition(\"name\", true, true));\n    return Collections.unmodifiableList(sortedPets);\n}","Folder":"spring-petclinic-customers-service"},{"Variables":[],"Methodscalled":[{"MethodCalled":"getPetsInternal"}],"Parameters":["pet"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Owner","MethodName":"addPet","MethodSourceCode":"public void addPet(Pet pet) {\n    getPetsInternal().add(pet);\n    pet.setOwner(this);\n}","Folder":"spring-petclinic-customers-service"},{"Variables":[],"Methodscalled":[{"MethodCalled":"toString"}],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Owner","MethodName":"toString","MethodSourceCode":"@Override\npublic String toString() {\n    return new ToStringCreator(this).append(\"id\", this.getId()).append(\"lastName\", this.getLastName()).append(\"firstName\", this.getFirstName()).append(\"address\", this.address).append(\"city\", this.city).append(\"telephone\", this.telephone).toString();\n}","Folder":"spring-petclinic-customers-service"},{"Variables":[],"Methodscalled":[{"MethodCalled":"toString"}],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Pet","MethodName":"toString","MethodSourceCode":"@Override\npublic String toString() {\n    return new ToStringCreator(this).append(\"id\", this.getId()).append(\"name\", this.getName()).append(\"birthDate\", this.getBirthDate()).append(\"type\", this.getType().getName()).append(\"ownerFirstname\", this.getOwner().getFirstName()).append(\"ownerLastname\", this.getOwner().getLastName()).toString();\n}","Folder":"spring-petclinic-customers-service"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"\n     * Retrieve all {@link PetType}s from the data store.\n     * @return a Collection of {@link PetType}s.\n     ","ClassName":"PetRepository","MethodName":"findPetTypes","MethodSourceCode":"/**\n * Retrieve all {@link PetType}s from the data store.\n * @return a Collection of {@link PetType}s.\n */\n@Query(\"SELECT ptype FROM PetType ptype ORDER BY ptype.name\")\nList<PetType> findPetTypes();","Folder":"spring-petclinic-customers-service"},{"Variables":[],"Methodscalled":[],"Parameters":["typeId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"PetRepository","MethodName":"findPetTypeById","MethodSourceCode":"@Query(\"FROM PetType ptype WHERE ptype.id = :typeId\")\nOptional<PetType> findPetTypeById(@Param(\"typeId\") int typeId);","Folder":"spring-petclinic-customers-service"},{"Variables":[],"Methodscalled":[],"Parameters":["owner"],"ASTFeatures":["MethodDeclaration"],"Comments":"\n     * Create Owner\n     ","ClassName":"OwnerResource","MethodName":"createOwner","MethodSourceCode":"/**\n * Create Owner\n */\n@PostMapping\n@ResponseStatus(HttpStatus.CREATED)\npublic Owner createOwner(@Valid @RequestBody Owner owner) {\n    return ownerRepository.save(owner);\n}","Folder":"spring-petclinic-customers-service"},{"Variables":[],"Methodscalled":[],"Parameters":["ownerId"],"ASTFeatures":["MethodDeclaration"],"Comments":"\n     * Read single Owner\n     ","ClassName":"OwnerResource","MethodName":"findOwner","MethodSourceCode":"/**\n * Read single Owner\n */\n@GetMapping(value = \"/{ownerId}\")\npublic Optional<Owner> findOwner(@PathVariable(\"ownerId\") @Min(1) int ownerId) {\n    return ownerRepository.findById(ownerId);\n}","Folder":"spring-petclinic-customers-service"},{"Variables":[],"Methodscalled":[{"MethodCalled":"findAll"}],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"\n     * Read List of Owners\n     ","ClassName":"OwnerResource","MethodName":"findAll","MethodSourceCode":"/**\n * Read List of Owners\n */\n@GetMapping\npublic List<Owner> findAll() {\n    return ownerRepository.findAll();\n}","Folder":"spring-petclinic-customers-service"},{"Variables":[{"VariableName":"owner"},{"VariableName":"ownerModel"}],"Methodscalled":[],"Parameters":["ownerId","ownerRequest"],"ASTFeatures":["MethodDeclaration"],"Comments":"\n     * Update Owner\n     ","ClassName":"OwnerResource","MethodName":"updateOwner","MethodSourceCode":"/**\n * Update Owner\n */\n@PutMapping(value = \"/{ownerId}\")\n@ResponseStatus(HttpStatus.NO_CONTENT)\npublic void updateOwner(@PathVariable(\"ownerId\") @Min(1) int ownerId, @Valid @RequestBody Owner ownerRequest) {\n    final Optional<Owner> owner = ownerRepository.findById(ownerId);\n    final Owner ownerModel = owner.orElseThrow(() -> new ResourceNotFoundException(\"Owner \" + ownerId + \" not found\"));\n    // This is done by hand for simplicity purpose. In a real life use-case we should consider using MapStruct.\n    ownerModel.setFirstName(ownerRequest.getFirstName());\n    ownerModel.setLastName(ownerRequest.getLastName());\n    ownerModel.setCity(ownerRequest.getCity());\n    ownerModel.setAddress(ownerRequest.getAddress());\n    ownerModel.setTelephone(ownerRequest.getTelephone());\n    log.info(\"Saving owner {}\", ownerModel);\n    ownerRepository.save(ownerModel);\n}","Folder":"spring-petclinic-customers-service"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"PetResource","MethodName":"getPetTypes","MethodSourceCode":"@GetMapping(\"/petTypes\")\npublic List<PetType> getPetTypes() {\n    return petRepository.findPetTypes();\n}","Folder":"spring-petclinic-customers-service"},{"Variables":[{"VariableName":"optionalOwner"},{"VariableName":"owner"},{"VariableName":"pet"}],"Methodscalled":[{"MethodCalled":"save"}],"Parameters":["petRequest","ownerId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"PetResource","MethodName":"processCreationForm","MethodSourceCode":"@PostMapping(\"/owners/{ownerId}/pets\")\n@ResponseStatus(HttpStatus.CREATED)\npublic Pet processCreationForm(@RequestBody PetRequest petRequest, @PathVariable(\"ownerId\") @Min(1) int ownerId) {\n    final Optional<Owner> optionalOwner = ownerRepository.findById(ownerId);\n    Owner owner = optionalOwner.orElseThrow(() -> new ResourceNotFoundException(\"Owner \" + ownerId + \" not found\"));\n    final Pet pet = new Pet();\n    owner.addPet(pet);\n    return save(pet, petRequest);\n}","Folder":"spring-petclinic-customers-service"},{"Variables":[{"VariableName":"petId"},{"VariableName":"pet"}],"Methodscalled":[{"MethodCalled":"findPetById"},{"MethodCalled":"save"}],"Parameters":["petRequest"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"PetResource","MethodName":"processUpdateForm","MethodSourceCode":"@PutMapping(\"/owners/*/pets/{petId}\")\n@ResponseStatus(HttpStatus.NO_CONTENT)\npublic void processUpdateForm(@RequestBody PetRequest petRequest) {\n    int petId = petRequest.getId();\n    Pet pet = findPetById(petId);\n    save(pet, petRequest);\n}","Folder":"spring-petclinic-customers-service"},{"Variables":[],"Methodscalled":[{"MethodCalled":"save"}],"Parameters":["pet","petRequest"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"PetResource","MethodName":"save","MethodSourceCode":"private Pet save(final Pet pet, final PetRequest petRequest) {\n    pet.setName(petRequest.getName());\n    pet.setBirthDate(petRequest.getBirthDate());\n    petRepository.findPetTypeById(petRequest.getTypeId()).ifPresent(pet::setType);\n    log.info(\"Saving pet {}\", pet);\n    return petRepository.save(pet);\n}","Folder":"spring-petclinic-customers-service"},{"Variables":[],"Methodscalled":[{"MethodCalled":"findPetById"}],"Parameters":["petId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"PetResource","MethodName":"findPet","MethodSourceCode":"@GetMapping(\"owners/*/pets/{petId}\")\npublic PetDetails findPet(@PathVariable(\"petId\") int petId) {\n    return new PetDetails(findPetById(petId));\n}","Folder":"spring-petclinic-customers-service"},{"Variables":[{"VariableName":"pet"}],"Methodscalled":[],"Parameters":["petId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"PetResource","MethodName":"findPetById","MethodSourceCode":"private Pet findPetById(int petId) {\n    Optional<Pet> pet = petRepository.findById(petId);\n    if (!pet.isPresent()) {\n        throw new ResourceNotFoundException(\"Pet \" + petId + \" not found\");\n    }\n    return pet.get();\n}","Folder":"spring-petclinic-customers-service"},{"Variables":[{"VariableName":"pet"}],"Methodscalled":[{"MethodCalled":"setupPet"}],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"PetResourceTest","MethodName":"shouldGetAPetInJSonFormat","MethodSourceCode":"@Test\nvoid shouldGetAPetInJSonFormat() throws Exception {\n    Pet pet = setupPet();\n    given(petRepository.findById(2)).willReturn(Optional.of(pet));\n    mvc.perform(get(\"/owners/2/pets/2\").accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk()).andExpect(content().contentType(\"application/json\")).andExpect(jsonPath(\"$.id\").value(2)).andExpect(jsonPath(\"$.name\").value(\"Basil\")).andExpect(jsonPath(\"$.type.id\").value(6));\n}","Folder":"spring-petclinic-customers-service"},{"Variables":[{"VariableName":"owner"},{"VariableName":"pet"},{"VariableName":"petType"}],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"PetResourceTest","MethodName":"setupPet","MethodSourceCode":"private Pet setupPet() {\n    Owner owner = new Owner();\n    owner.setFirstName(\"George\");\n    owner.setLastName(\"Bush\");\n    Pet pet = new Pet();\n    pet.setName(\"Basil\");\n    pet.setId(2);\n    PetType petType = new PetType();\n    petType.setId(6);\n    pet.setType(petType);\n    owner.addPet(pet);\n    return pet;\n}","Folder":"spring-petclinic-customers-service"},{"Variables":[],"Methodscalled":[],"Parameters":["args"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"DiscoveryServerApplication","MethodName":"main","MethodSourceCode":"public static void main(String[] args) {\n    SpringApplication.run(DiscoveryServerApplication.class, args);\n}","Folder":"spring-petclinic-discovery-server"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"DiscoveryServerApplicationTests","MethodName":"contextLoads","MethodSourceCode":"@Test\nvoid contextLoads() {\n}","Folder":"spring-petclinic-discovery-server"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Vet","MethodName":"getSpecialtiesInternal","MethodSourceCode":"protected Set<Specialty> getSpecialtiesInternal() {\n    if (this.specialties == null) {\n        this.specialties = new HashSet<>();\n    }\n    return this.specialties;\n}","Folder":"spring-petclinic-vets-service"},{"Variables":[{"VariableName":"sortedSpecs"}],"Methodscalled":[{"MethodCalled":"getSpecialtiesInternal"}],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Vet","MethodName":"getSpecialties","MethodSourceCode":"@XmlElement\npublic List<Specialty> getSpecialties() {\n    List<Specialty> sortedSpecs = new ArrayList<>(getSpecialtiesInternal());\n    PropertyComparator.sort(sortedSpecs, new MutableSortDefinition(\"name\", true, true));\n    return Collections.unmodifiableList(sortedSpecs);\n}","Folder":"spring-petclinic-vets-service"},{"Variables":[],"Methodscalled":[{"MethodCalled":"getSpecialtiesInternal"}],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Vet","MethodName":"getNrOfSpecialties","MethodSourceCode":"public int getNrOfSpecialties() {\n    return getSpecialtiesInternal().size();\n}","Folder":"spring-petclinic-vets-service"},{"Variables":[],"Methodscalled":[{"MethodCalled":"getSpecialtiesInternal"}],"Parameters":["specialty"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Vet","MethodName":"addSpecialty","MethodSourceCode":"public void addSpecialty(Specialty specialty) {\n    getSpecialtiesInternal().add(specialty);\n}","Folder":"spring-petclinic-vets-service"},{"Variables":[],"Methodscalled":[],"Parameters":["args"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"VetsServiceApplication","MethodName":"main","MethodSourceCode":"public static void main(String[] args) {\n    SpringApplication.run(VetsServiceApplication.class, args);\n}","Folder":"spring-petclinic-vets-service"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"VetResource","MethodName":"showResourcesVetList","MethodSourceCode":"@GetMapping\n@Cacheable(\"vets\")\npublic List<Vet> showResourcesVetList() {\n    return vetRepository.findAll();\n}","Folder":"spring-petclinic-vets-service"},{"Variables":[{"VariableName":"vet"}],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"VetResourceTest","MethodName":"shouldGetAListOfVets","MethodSourceCode":"@Test\nvoid shouldGetAListOfVets() throws Exception {\n    Vet vet = new Vet();\n    vet.setId(1);\n    given(vetRepository.findAll()).willReturn(asList(vet));\n    mvc.perform(get(\"/vets\").accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk()).andExpect(jsonPath(\"$[0].id\").value(1));\n}","Folder":"spring-petclinic-vets-service"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"MetricConfig","MethodName":"metricsCommonTags","MethodSourceCode":"@Bean\nMeterRegistryCustomizer<MeterRegistry> metricsCommonTags() {\n    return registry -> registry.config().commonTags(\"application\", \"petclinic\");\n}","Folder":"spring-petclinic-visits-service"},{"Variables":[],"Methodscalled":[],"Parameters":["registry"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"MetricConfig","MethodName":"timedAspect","MethodSourceCode":"@Bean\nTimedAspect timedAspect(MeterRegistry registry) {\n    return new TimedAspect(registry);\n}","Folder":"spring-petclinic-visits-service"},{"Variables":[],"Methodscalled":[],"Parameters":["petId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"VisitRepository","MethodName":"findByPetId","MethodSourceCode":"List<Visit> findByPetId(int petId);","Folder":"spring-petclinic-visits-service"},{"Variables":[],"Methodscalled":[],"Parameters":["petIds"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"VisitRepository","MethodName":"findByPetIdIn","MethodSourceCode":"List<Visit> findByPetIdIn(Collection<Integer> petIds);","Folder":"spring-petclinic-visits-service"},{"Variables":[],"Methodscalled":[],"Parameters":["args"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"VisitsServiceApplication","MethodName":"main","MethodSourceCode":"public static void main(String[] args) {\n    SpringApplication.run(VisitsServiceApplication.class, args);\n}","Folder":"spring-petclinic-visits-service"},{"Variables":[],"Methodscalled":[],"Parameters":["visit","petId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"VisitResource","MethodName":"create","MethodSourceCode":"@PostMapping(\"owners/*/pets/{petId}/visits\")\n@ResponseStatus(HttpStatus.CREATED)\npublic Visit create(@Valid @RequestBody Visit visit, @PathVariable(\"petId\") @Min(1) int petId) {\n    visit.setPetId(petId);\n    log.info(\"Saving visit {}\", visit);\n    return visitRepository.save(visit);\n}","Folder":"spring-petclinic-visits-service"},{"Variables":[],"Methodscalled":[],"Parameters":["petId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"VisitResource","MethodName":"read","MethodSourceCode":"@GetMapping(\"owners/*/pets/{petId}/visits\")\npublic List<Visit> read(@PathVariable(\"petId\") @Min(1) int petId) {\n    return visitRepository.findByPetId(petId);\n}","Folder":"spring-petclinic-visits-service"},{"Variables":[{"VariableName":"byPetIdIn"}],"Methodscalled":[],"Parameters":["petIds"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"VisitResource","MethodName":"read","MethodSourceCode":"@GetMapping(\"pets/visits\")\npublic Visits read(@RequestParam(\"petId\") List<Integer> petIds) {\n    final List<Visit> byPetIdIn = visitRepository.findByPetIdIn(petIds);\n    return new Visits(byPetIdIn);\n}","Folder":"spring-petclinic-visits-service"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"VisitResourceTest","MethodName":"shouldFetchVisits","MethodSourceCode":"@Test\nvoid shouldFetchVisits() throws Exception {\n    given(visitRepository.findByPetIdIn(asList(111, 222))).willReturn(asList(visit().id(1).petId(111).build(), visit().id(2).petId(222).build(), visit().id(3).petId(222).build()));\n    mvc.perform(get(\"/pets/visits?petId=111,222\")).andExpect(status().isOk()).andExpect(jsonPath(\"$.items[0].id\").value(1)).andExpect(jsonPath(\"$.items[1].id\").value(2)).andExpect(jsonPath(\"$.items[2].id\").value(3)).andExpect(jsonPath(\"$.items[0].petId\").value(111)).andExpect(jsonPath(\"$.items[1].petId\").value(222)).andExpect(jsonPath(\"$.items[2].petId\").value(222));\n}","Folder":"spring-petclinic-visits-service"}]}