{"Data":[{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ApiGatewayProperties","MethodName":"getPath","MethodSourceCode":"public String getPath() {\n    return path;\n}","Folder":"api-gateway-service"},{"Variables":[],"Methodscalled":[],"Parameters":["path"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ApiGatewayProperties","MethodName":"setPath","MethodSourceCode":"public void setPath(String path) {\n    this.path = path;\n}","Folder":"api-gateway-service"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ApiGatewayProperties","MethodName":"getMethod","MethodSourceCode":"public RequestMethod getMethod() {\n    return method;\n}","Folder":"api-gateway-service"},{"Variables":[],"Methodscalled":[],"Parameters":["method"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ApiGatewayProperties","MethodName":"setMethod","MethodSourceCode":"public void setMethod(RequestMethod method) {\n    this.method = method;\n}","Folder":"api-gateway-service"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ApiGatewayProperties","MethodName":"getLocation","MethodSourceCode":"public String getLocation() {\n    return location;\n}","Folder":"api-gateway-service"},{"Variables":[],"Methodscalled":[],"Parameters":["location"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ApiGatewayProperties","MethodName":"setLocation","MethodSourceCode":"public void setLocation(String location) {\n    this.location = location;\n}","Folder":"api-gateway-service"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ApiGatewayProperties","MethodName":"getEndpoints","MethodSourceCode":"public List<Endpoint> getEndpoints() {\n    return endpoints;\n}","Folder":"api-gateway-service"},{"Variables":[],"Methodscalled":[],"Parameters":["endpoints"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ApiGatewayProperties","MethodName":"setEndpoints","MethodSourceCode":"public void setEndpoints(List<Endpoint> endpoints) {\n    this.endpoints = endpoints;\n}","Folder":"api-gateway-service"},{"Variables":[],"Methodscalled":[],"Parameters":["template"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ApiGatewayServiceConfiguration","MethodName":"websocketEventsTranslator","MethodSourceCode":"@Bean\npublic WebsocketEventsTranslator websocketEventsTranslator(SimpMessagingTemplate template) {\n    return new WebsocketEventsTranslator(template);\n}","Folder":"api-gateway-service"},{"Variables":[{"VariableName":"converter"},{"VariableName":"httpClient"},{"VariableName":"restTemplate"}],"Methodscalled":[],"Parameters":["converters"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ApiGatewayServiceConfiguration","MethodName":"restTemplate","MethodSourceCode":"@Bean\npublic RestTemplate restTemplate(HttpMessageConverters converters) {\n    // we have to define Apache HTTP client to use the PATCH verb\n    MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();\n    converter.setSupportedMediaTypes(MediaType.parseMediaTypes(\"application/json\"));\n    converter.setObjectMapper(new ObjectMapper());\n    HttpClient httpClient = HttpClients.createDefault();\n    RestTemplate restTemplate = new RestTemplate(Collections.<HttpMessageConverter<?>>singletonList(converter));\n    restTemplate.setRequestFactory(new HttpComponentsClientHttpRequestFactory(httpClient));\n    restTemplate.setErrorHandler(new RestTemplateErrorHandler());\n    return restTemplate;\n}","Folder":"api-gateway-service"},{"Variables":[{"VariableName":"cm"}],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"GatewayController","MethodName":"init","MethodSourceCode":"@PostConstruct\npublic void init() {\n    PoolingHttpClientConnectionManager cm = new PoolingHttpClientConnectionManager();\n    httpClient = HttpClients.custom().setConnectionManager(cm).build();\n}","Folder":"api-gateway-service"},{"Variables":[{"VariableName":"proxiedRequest"},{"VariableName":"proxiedResponse"}],"Methodscalled":[{"MethodCalled":"createHttpUriRequest"},{"MethodCalled":"read"}],"Parameters":["request"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"GatewayController","MethodName":"proxyRequest","MethodSourceCode":"@RequestMapping(value = \"/**\", method = { GET, POST, PUT, DELETE })\npublic String proxyRequest(HttpServletRequest request) throws NoSuchRequestHandlingMethodException, IOException, URISyntaxException {\n    HttpUriRequest proxiedRequest = createHttpUriRequest(request);\n    log.info(\"request: {}\", proxiedRequest);\n    HttpResponse proxiedResponse = httpClient.execute(proxiedRequest);\n    return read(proxiedResponse.getEntity().getContent());\n}","Folder":"api-gateway-service"},{"Variables":[{"VariableName":"urlRequestTransformer"},{"VariableName":"contentRequestTransformer"},{"VariableName":"headersRequestTransformer"}],"Methodscalled":[],"Parameters":["request"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"GatewayController","MethodName":"createHttpUriRequest","MethodSourceCode":"private HttpUriRequest createHttpUriRequest(HttpServletRequest request) throws URISyntaxException, NoSuchRequestHandlingMethodException, IOException {\n    URLRequestTransformer urlRequestTransformer = new URLRequestTransformer(apiGatewayProperties);\n    ContentRequestTransformer contentRequestTransformer = new ContentRequestTransformer();\n    HeadersRequestTransformer headersRequestTransformer = new HeadersRequestTransformer();\n    headersRequestTransformer.setPredecessor(contentRequestTransformer);\n    contentRequestTransformer.setPredecessor(urlRequestTransformer);\n    return headersRequestTransformer.transform(request).build();\n}","Folder":"api-gateway-service"},{"Variables":[{"VariableName":"buffer"}],"Methodscalled":[],"Parameters":["input"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"GatewayController","MethodName":"read","MethodSourceCode":"private String read(InputStream input) throws IOException {\n    try (BufferedReader buffer = new BufferedReader(new InputStreamReader(input))) {\n        return buffer.lines().collect(Collectors.joining(\"\\n\"));\n    }\n}","Folder":"api-gateway-service"},{"Variables":[],"Methodscalled":[],"Parameters":["args"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ApiGatewayServiceMain","MethodName":"main","MethodSourceCode":"public static void main(String[] args) {\n    SpringApplication.run(ApiGatewayServiceConfiguration.class, args);\n}","Folder":"api-gateway-service"},{"Variables":[],"Methodscalled":[],"Parameters":["response"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"RestTemplateErrorHandler","MethodName":"handleError","MethodSourceCode":"@Override\npublic void handleError(ClientHttpResponse response) throws IOException {\n    log.error(\"Response error: {} {}\", response.getStatusCode(), response.getStatusText());\n}","Folder":"api-gateway-service"},{"Variables":[],"Methodscalled":[],"Parameters":["response"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"RestTemplateErrorHandler","MethodName":"hasError","MethodSourceCode":"@Override\npublic boolean hasError(ClientHttpResponse response) throws IOException {\n    return RestUtil.isError(response.getStatusCode());\n}","Folder":"api-gateway-service"},{"Variables":[{"VariableName":"series"}],"Methodscalled":[],"Parameters":["status"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"RestUtil","MethodName":"isError","MethodSourceCode":"public static boolean isError(HttpStatus status) {\n    HttpStatus.Series series = status.series();\n    return (HttpStatus.Series.CLIENT_ERROR.equals(series) || HttpStatus.Series.SERVER_ERROR.equals(series));\n}","Folder":"api-gateway-service"},{"Variables":[{"VariableName":"requestBuilder"},{"VariableName":"requestContent"},{"VariableName":"entity"}],"Methodscalled":[{"MethodCalled":"transform"}],"Parameters":["request"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ContentRequestTransformer","MethodName":"transform","MethodSourceCode":"@Override\npublic RequestBuilder transform(HttpServletRequest request) throws NoSuchRequestHandlingMethodException, URISyntaxException, IOException {\n    RequestBuilder requestBuilder = predecessor.transform(request);\n    String requestContent = request.getReader().lines().collect(Collectors.joining(\"\"));\n    if (!requestContent.isEmpty()) {\n        StringEntity entity = new StringEntity(requestContent, ContentType.APPLICATION_JSON);\n        requestBuilder.setEntity(entity);\n    }\n    return requestBuilder;\n}","Folder":"api-gateway-service"},{"Variables":[{"VariableName":"requestBuilder"},{"VariableName":"headerNames"},{"VariableName":"headerName"},{"VariableName":"headerValue"}],"Methodscalled":[{"MethodCalled":"transform"}],"Parameters":["request"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"HeadersRequestTransformer","MethodName":"transform","MethodSourceCode":"@Override\npublic RequestBuilder transform(HttpServletRequest request) throws NoSuchRequestHandlingMethodException, URISyntaxException, IOException {\n    RequestBuilder requestBuilder = predecessor.transform(request);\n    Enumeration<String> headerNames = request.getHeaderNames();\n    while (headerNames.hasMoreElements()) {\n        String headerName = headerNames.nextElement();\n        String headerValue = request.getHeader(headerName);\n        if (headerName.equals(\"x-access-token\")) {\n            requestBuilder.addHeader(headerName, headerValue);\n        }\n    }\n    return requestBuilder;\n}","Folder":"api-gateway-service"},{"Variables":[],"Methodscalled":[],"Parameters":["request"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ProxyRequestTransformer","MethodName":"transform","MethodSourceCode":"public abstract RequestBuilder transform(HttpServletRequest request) throws NoSuchRequestHandlingMethodException, URISyntaxException, IOException;","Folder":"api-gateway-service"},{"Variables":[],"Methodscalled":[],"Parameters":["transformer"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ProxyRequestTransformer","MethodName":"setPredecessor","MethodSourceCode":"public void setPredecessor(ProxyRequestTransformer transformer) {\n    this.predecessor = transformer;\n}","Folder":"api-gateway-service"},{"Variables":[{"VariableName":"requestURI"},{"VariableName":"uri"},{"VariableName":"rb"}],"Methodscalled":[{"MethodCalled":"getServiceUrl"},{"MethodCalled":"getServiceUrl"}],"Parameters":["request"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"URLRequestTransformer","MethodName":"transform","MethodSourceCode":"@Override\npublic RequestBuilder transform(HttpServletRequest request) throws NoSuchRequestHandlingMethodException, URISyntaxException {\n    String requestURI = request.getRequestURI();\n    URI uri;\n    if (request.getQueryString() != null && !request.getQueryString().isEmpty()) {\n        uri = new URI(getServiceUrl(requestURI, request) + \"?\" + request.getQueryString());\n    } else {\n        uri = new URI(getServiceUrl(requestURI, request));\n    }\n    RequestBuilder rb = RequestBuilder.create(request.getMethod());\n    rb.setUri(uri);\n    return rb;\n}","Folder":"api-gateway-service"},{"Variables":[{"VariableName":"endpoint"}],"Methodscalled":[],"Parameters":["requestURI","httpServletRequest"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"URLRequestTransformer","MethodName":"getServiceUrl","MethodSourceCode":"private String getServiceUrl(String requestURI, HttpServletRequest httpServletRequest) throws NoSuchRequestHandlingMethodException {\n    ApiGatewayProperties.Endpoint endpoint = apiGatewayProperties.getEndpoints().stream().filter(e -> requestURI.matches(e.getPath()) && e.getMethod() == RequestMethod.valueOf(httpServletRequest.getMethod())).findFirst().orElseThrow(() -> new NoSuchRequestHandlingMethodException(httpServletRequest));\n    return endpoint.getLocation() + requestURI;\n}","Folder":"api-gateway-service"},{"Variables":[],"Methodscalled":[],"Parameters":["cmd"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardAggregate","MethodName":"process","MethodSourceCode":"public List<Event> process(CreateBoardCommand cmd) {\n    log.info(\"Calling BoardAggregate.process for CreateBoardCommand : {}\", cmd);\n    return EventUtil.events(new BoardCreatedEvent(cmd.getBoardInfo()));\n}","Folder":"board-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":["event"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardAggregate","MethodName":"apply","MethodSourceCode":"public void apply(BoardCreatedEvent event) {\n    log.info(\"Calling BoardAggregate.APPLY for BoardCreatedEvent : {}\", event);\n    this.board = event.getBoardInfo();\n    this.board.setCreation(event.getBoardInfo().getCreation());\n    this.board.setUpdate(event.getBoardInfo().getUpdate());\n    this.board.setTitle(event.getBoardInfo().getTitle());\n}","Folder":"board-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardAggregate","MethodName":"getBoard","MethodSourceCode":"public BoardInfo getBoard() {\n    return board;\n}","Folder":"board-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":["board"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardCommandController","MethodName":"saveBoard","MethodSourceCode":"@RequestMapping(value = \"/boards\", method = POST)\npublic CompletableFuture<BoardResponse> saveBoard(@RequestBody BoardInfo board) {\n    return boardService.save(board).thenApply(this::makeBoardResponse);\n}","Folder":"board-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":["e"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardCommandController","MethodName":"makeBoardResponse","MethodSourceCode":"private BoardResponse makeBoardResponse(EntityWithIdAndVersion<BoardAggregate> e) {\n    return new BoardResponse(e.getEntityId(), e.getAggregate().getBoard().getTitle(), e.getAggregate().getBoard().getCreation().getWho(), e.getAggregate().getBoard().getCreation().getWhen(), e.getAggregate().getBoard().getUpdate().getWho(), e.getAggregate().getBoard().getUpdate().getWhen());\n}","Folder":"board-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":["eventStore"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardCommandSideConfiguration","MethodName":"boardAggregateRepository","MethodSourceCode":"@Bean\npublic AggregateRepository<BoardAggregate, BoardCommand> boardAggregateRepository(EventuateAggregateStore eventStore) {\n    return new AggregateRepository<>(BoardAggregate.class, eventStore);\n}","Folder":"board-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":["boardAggregateRepository"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardCommandSideConfiguration","MethodName":"boardService","MethodSourceCode":"@Bean\npublic BoardService boardService(AggregateRepository<BoardAggregate, BoardCommand> boardAggregateRepository) {\n    return new BoardService(boardAggregateRepository);\n}","Folder":"board-command-side"},{"Variables":[{"VariableName":"additional"}],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardCommandSideConfiguration","MethodName":"customConverters","MethodSourceCode":"@Bean\npublic HttpMessageConverters customConverters() {\n    HttpMessageConverter<?> additional = new MappingJackson2HttpMessageConverter();\n    return new HttpMessageConverters(additional);\n}","Folder":"board-command-side"},{"Variables":[],"Methodscalled":[{"MethodCalled":"save"}],"Parameters":["board"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardService","MethodName":"save","MethodSourceCode":"public CompletableFuture<EntityWithIdAndVersion<BoardAggregate>> save(BoardInfo board) {\n    log.info(\"BoardService saving : {}\", board);\n    return aggregateRepository.save(new CreateBoardCommand(board));\n}","Folder":"board-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"CreateBoardCommand","MethodName":"getBoardInfo","MethodSourceCode":"public BoardInfo getBoardInfo() {\n    return boardInfo;\n}","Folder":"board-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"CreateBoardCommand","MethodName":"toString","MethodSourceCode":"@Override\npublic String toString() {\n    return ToStringBuilder.reflectionToString(this);\n}","Folder":"board-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":["args"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardCommandSideServiceMain","MethodName":"main","MethodSourceCode":"public static void main(String[] args) {\n    SpringApplication.run(BoardCommandSideServiceConfiguration.class, args);\n}","Folder":"board-command-side-service"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardQueryController","MethodName":"listAllBoards","MethodSourceCode":"@RequestMapping(value = \"api/boards\", method = GET)\npublic ResponseEntity<BoardsQueryResponse> listAllBoards() {\n    return new ResponseEntity<>(new BoardsQueryResponse(boardRepository.findAll()), OK);\n}","Folder":"board-query-side"},{"Variables":[],"Methodscalled":[],"Parameters":["id"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardQueryController","MethodName":"getBoard","MethodSourceCode":"@RequestMapping(value = \"api/boards/{id}\", method = GET)\npublic ResponseEntity<BoardQueryResponse> getBoard(@PathVariable(\"id\") String id) {\n    return Optional.ofNullable(boardRepository.findOne(id)).map(b -> new ResponseEntity<>(new BoardQueryResponse(b), OK)).orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));\n}","Folder":"board-query-side"},{"Variables":[],"Methodscalled":[],"Parameters":["boardInfoUpdateService"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardQuerySideConfiguration","MethodName":"boardQueryWorkflow","MethodSourceCode":"@Bean\npublic BoardQueryWorkflow boardQueryWorkflow(BoardUpdateService boardInfoUpdateService) {\n    return new BoardQueryWorkflow(boardInfoUpdateService);\n}","Folder":"board-query-side"},{"Variables":[],"Methodscalled":[],"Parameters":["boardRepository"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardQuerySideConfiguration","MethodName":"boardInfoUpdateService","MethodSourceCode":"@Bean\npublic BoardUpdateService boardInfoUpdateService(BoardRepository boardRepository) {\n    return new BoardUpdateService(boardRepository);\n}","Folder":"board-query-side"},{"Variables":[{"VariableName":"additional"}],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardQuerySideConfiguration","MethodName":"customConverters","MethodSourceCode":"@Bean\npublic HttpMessageConverters customConverters() {\n    HttpMessageConverter<?> additional = new MappingJackson2HttpMessageConverter();\n    return new HttpMessageConverters(additional);\n}","Folder":"board-query-side"},{"Variables":[{"VariableName":"event"},{"VariableName":"id"}],"Methodscalled":[{"MethodCalled":"create"}],"Parameters":["de"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardQueryWorkflow","MethodName":"create","MethodSourceCode":"@EventHandlerMethod\npublic void create(DispatchedEvent<BoardCreatedEvent> de) {\n    BoardCreatedEvent event = de.getEvent();\n    String id = de.getEntityId();\n    log.info(\"BoardQueryWorkflow got event : {}\", de.getEvent());\n    boardUpdateService.create(id, event.getBoardInfo());\n}","Folder":"board-query-side"},{"Variables":[],"Methodscalled":[],"Parameters":["boardId","boardInfo"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardUpdateService","MethodName":"create","MethodSourceCode":"public Board create(String boardId, BoardInfo boardInfo) {\n    return boardRepository.save(new Board(boardId, boardInfo.getTitle(), boardInfo.getCreation().getWho(), boardInfo.getCreation().getWhen(), boardInfo.getUpdate().getWhen(), boardInfo.getUpdate().getWho()));\n}","Folder":"board-query-side"},{"Variables":[],"Methodscalled":[],"Parameters":["args"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardQuerySideServiceMain","MethodName":"main","MethodSourceCode":"public static void main(String[] args) {\n    SpringApplication.run(BoardQuerySideServiceConfiguration.class, args);\n}","Folder":"board-query-side-service"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AuditEntry","MethodName":"getWho","MethodSourceCode":"public String getWho() {\n    return who;\n}","Folder":"common"},{"Variables":[],"Methodscalled":[],"Parameters":["who"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AuditEntry","MethodName":"setWho","MethodSourceCode":"public void setWho(String who) {\n    this.who = who;\n}","Folder":"common"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AuditEntry","MethodName":"getWhen","MethodSourceCode":"public Date getWhen() {\n    return when;\n}","Folder":"common"},{"Variables":[],"Methodscalled":[],"Parameters":["when"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AuditEntry","MethodName":"setWhen","MethodSourceCode":"public void setWhen(Date when) {\n    this.when = when;\n}","Folder":"common"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AuditEntry","MethodName":"toString","MethodSourceCode":"@Override\npublic String toString() {\n    return ToStringBuilder.reflectionToString(this);\n}","Folder":"common"},{"Variables":[],"Methodscalled":[],"Parameters":["o"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AuditEntry","MethodName":"equals","MethodSourceCode":"@Override\npublic boolean equals(Object o) {\n    return EqualsBuilder.reflectionEquals(this, o);\n}","Folder":"common"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AuditEntry","MethodName":"hashCode","MethodSourceCode":"@Override\npublic int hashCode() {\n    return HashCodeBuilder.reflectionHashCode(this);\n}","Folder":"common"},{"Variables":[],"Methodscalled":[{"MethodCalled":"authenticationManagerBean"}],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AuthConfiguration","MethodName":"authenticationManagerBean","MethodSourceCode":"@Bean\n@Override\npublic AuthenticationManager authenticationManagerBean() throws Exception {\n    return super.authenticationManagerBean();\n}","Folder":"common-auth"},{"Variables":[],"Methodscalled":[],"Parameters":["auth"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AuthConfiguration","MethodName":"configure","MethodSourceCode":"@Override\nprotected void configure(AuthenticationManagerBuilder auth) throws Exception {\n    auth.inMemoryAuthentication();\n}","Folder":"common-auth"},{"Variables":[],"Methodscalled":[],"Parameters":["http"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AuthConfiguration","MethodName":"configure","MethodSourceCode":"@Override\nprotected void configure(HttpSecurity http) throws Exception {\n    http.csrf().disable().formLogin().loginPage(\"/index.html\").and().authorizeRequests().antMatchers(\"/health\").permitAll().antMatchers(\"/swagger-ui.html\").permitAll().antMatchers(\"/v2/api-docs\").permitAll().antMatchers(\"/js/**\").permitAll().antMatchers(\"/styles/**\").permitAll().antMatchers(\"/views/**\").permitAll().antMatchers(\"/webjars/**\").permitAll().antMatchers(\"/swagger-resources/**\").permitAll().antMatchers(\"/configuration/**\").permitAll().antMatchers(\"/validatorUrl/**\").permitAll().antMatchers(\"/index.html\").permitAll().antMatchers(\"/events/**\").permitAll().antMatchers(HttpMethod.POST, \"/api/authenticate\").permitAll().antMatchers(HttpMethod.GET, \"/events\").permitAll().anyRequest().authenticated().and().addFilterBefore(new StatelessAuthenticationFilter(tokenAuthenticationService), UsernamePasswordAuthenticationFilter.class);\n}","Folder":"common-auth"},{"Variables":[{"VariableName":"res"}],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AuthConfiguration","MethodName":"tokenService","MethodSourceCode":"@Bean\npublic TokenService tokenService() {\n    KeyBasedPersistenceTokenService res = new KeyBasedPersistenceTokenService();\n    res.setSecureRandom(new SecureRandom());\n    res.setServerSecret(securityProperties.getServerSecret());\n    res.setServerInteger(securityProperties.getServerInteger());\n    return res;\n}","Folder":"common-auth"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AuthProperties","MethodName":"getServerSecret","MethodSourceCode":"public String getServerSecret() {\n    return serverSecret;\n}","Folder":"common-auth"},{"Variables":[],"Methodscalled":[],"Parameters":["serverSecret"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AuthProperties","MethodName":"setServerSecret","MethodSourceCode":"public void setServerSecret(String serverSecret) {\n    this.serverSecret = serverSecret;\n}","Folder":"common-auth"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AuthProperties","MethodName":"getServerInteger","MethodSourceCode":"public Integer getServerInteger() {\n    return serverInteger;\n}","Folder":"common-auth"},{"Variables":[],"Methodscalled":[],"Parameters":["serverInteger"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AuthProperties","MethodName":"setServerInteger","MethodSourceCode":"public void setServerInteger(Integer serverInteger) {\n    this.serverInteger = serverInteger;\n}","Folder":"common-auth"},{"Variables":[],"Methodscalled":[{"MethodCalled":"doFilter"}],"Parameters":["req","res","chain"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"StatelessAuthenticationFilter","MethodName":"doFilter","MethodSourceCode":"@Override\npublic void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {\n    SecurityContextHolder.getContext().setAuthentication(tokenAuthenticationService.getAuthentication((HttpServletRequest) req));\n    chain.doFilter(req, res);\n}","Folder":"common-auth"},{"Variables":[],"Methodscalled":[],"Parameters":["username"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"User","MethodName":"setUsername","MethodSourceCode":"public void setUsername(String username) {\n    this.email = username;\n}","Folder":"common-auth"},{"Variables":[{"VariableName":"authority"},{"VariableName":"res"}],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"User","MethodName":"getAuthorities","MethodSourceCode":"@Override\n@JsonIgnore\npublic Collection<? extends GrantedAuthority> getAuthorities() {\n    SimpleGrantedAuthority authority = new SimpleGrantedAuthority(\"USER\");\n    Set<GrantedAuthority> res = new HashSet<GrantedAuthority>();\n    res.add(authority);\n    return res;\n}","Folder":"common-auth"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"User","MethodName":"getPassword","MethodSourceCode":"@Override\npublic String getPassword() {\n    return \"\";\n}","Folder":"common-auth"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"User","MethodName":"getUsername","MethodSourceCode":"@Override\npublic String getUsername() {\n    return this.email;\n}","Folder":"common-auth"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"User","MethodName":"isAccountNonExpired","MethodSourceCode":"@Override\npublic boolean isAccountNonExpired() {\n    return false;\n}","Folder":"common-auth"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"User","MethodName":"isAccountNonLocked","MethodSourceCode":"@Override\npublic boolean isAccountNonLocked() {\n    return false;\n}","Folder":"common-auth"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"User","MethodName":"isCredentialsNonExpired","MethodSourceCode":"@Override\npublic boolean isCredentialsNonExpired() {\n    return false;\n}","Folder":"common-auth"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"User","MethodName":"isEnabled","MethodSourceCode":"@Override\npublic boolean isEnabled() {\n    return false;\n}","Folder":"common-auth"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"User","MethodName":"getEmail","MethodSourceCode":"public String getEmail() {\n    return email;\n}","Folder":"common-auth"},{"Variables":[],"Methodscalled":[],"Parameters":["email"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"User","MethodName":"setEmail","MethodSourceCode":"public void setEmail(String email) {\n    this.email = email;\n}","Folder":"common-auth"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"UserAuthentication","MethodName":"getName","MethodSourceCode":"@Override\npublic String getName() {\n    return user.getUsername();\n}","Folder":"common-auth"},{"Variables":[],"Methodscalled":[{"MethodCalled":"getAuthorities"}],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"UserAuthentication","MethodName":"getAuthorities","MethodSourceCode":"@Override\npublic Collection<? extends GrantedAuthority> getAuthorities() {\n    return user.getAuthorities();\n}","Folder":"common-auth"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"UserAuthentication","MethodName":"getCredentials","MethodSourceCode":"@Override\npublic Object getCredentials() {\n    return user.getPassword();\n}","Folder":"common-auth"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"UserAuthentication","MethodName":"getDetails","MethodSourceCode":"@Override\npublic User getDetails() {\n    return user;\n}","Folder":"common-auth"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"UserAuthentication","MethodName":"getPrincipal","MethodSourceCode":"@Override\npublic Object getPrincipal() {\n    return user.getUsername();\n}","Folder":"common-auth"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"UserAuthentication","MethodName":"isAuthenticated","MethodSourceCode":"@Override\npublic boolean isAuthenticated() {\n    return authenticated;\n}","Folder":"common-auth"},{"Variables":[],"Methodscalled":[],"Parameters":["authenticated"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"UserAuthentication","MethodName":"setAuthenticated","MethodSourceCode":"@Override\npublic void setAuthenticated(boolean authenticated) {\n    this.authenticated = authenticated;\n}","Folder":"common-auth"},{"Variables":[{"VariableName":"tokenString"},{"VariableName":"token"},{"VariableName":"user"}],"Methodscalled":[],"Parameters":["request"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TokenAuthenticationService","MethodName":"getAuthentication","MethodSourceCode":"public Authentication getAuthentication(HttpServletRequest request) throws IOException {\n    final String tokenString = request.getHeader(AUTH_HEADER_NAME);\n    if (tokenString != null) {\n        Token token = tokenService.verifyToken(tokenString);\n        final User user = mapper.readValue(token.getExtendedInformation(), User.class);\n        if (user != null && (System.currentTimeMillis() - token.getKeyCreationTime()) < DAY) {\n            return new UserAuthentication(user);\n        }\n    }\n    return null;\n}","Folder":"common-auth"},{"Variables":[{"VariableName":"user"},{"VariableName":"token"}],"Methodscalled":[],"Parameters":["request"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AuthController","MethodName":"doAuth","MethodSourceCode":"@RequestMapping(value = \"/api/authenticate\", method = POST)\npublic ResponseEntity<AuthResponse> doAuth(@RequestBody @Valid AuthRequest request) throws IOException {\n    User user = new User();\n    user.setEmail(request.getEmail());\n    Token token = tokenService.allocateToken(objectMapper.writeValueAsString(user));\n    return ResponseEntity.status(HttpStatus.OK).body(new AuthResponse(token.getKey()));\n}","Folder":"common-auth-controller"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AuthRequest","MethodName":"getEmail","MethodSourceCode":"public String getEmail() {\n    return email;\n}","Folder":"common-auth-controller"},{"Variables":[],"Methodscalled":[],"Parameters":["email"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AuthRequest","MethodName":"setEmail","MethodSourceCode":"public void setEmail(String email) {\n    this.email = email;\n}","Folder":"common-auth-controller"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AuthResponse","MethodName":"getToken","MethodSourceCode":"public String getToken() {\n    return token;\n}","Folder":"common-auth-controller"},{"Variables":[],"Methodscalled":[],"Parameters":["token"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AuthResponse","MethodName":"setToken","MethodSourceCode":"public void setToken(String token) {\n    this.token = token;\n}","Folder":"common-auth-controller"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardInfo","MethodName":"getTitle","MethodSourceCode":"public String getTitle() {\n    return title;\n}","Folder":"common-board"},{"Variables":[],"Methodscalled":[],"Parameters":["title"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardInfo","MethodName":"setTitle","MethodSourceCode":"public void setTitle(String title) {\n    this.title = title;\n}","Folder":"common-board"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardInfo","MethodName":"getCreation","MethodSourceCode":"public AuditEntry getCreation() {\n    return creation;\n}","Folder":"common-board"},{"Variables":[],"Methodscalled":[],"Parameters":["creation"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardInfo","MethodName":"setCreation","MethodSourceCode":"public void setCreation(AuditEntry creation) {\n    this.creation = creation;\n}","Folder":"common-board"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardInfo","MethodName":"getUpdate","MethodSourceCode":"public AuditEntry getUpdate() {\n    return update;\n}","Folder":"common-board"},{"Variables":[],"Methodscalled":[],"Parameters":["update"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardInfo","MethodName":"setUpdate","MethodSourceCode":"public void setUpdate(AuditEntry update) {\n    this.update = update;\n}","Folder":"common-board"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardInfo","MethodName":"toString","MethodSourceCode":"@Override\npublic String toString() {\n    return ToStringBuilder.reflectionToString(this);\n}","Folder":"common-board"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardCreatedEvent","MethodName":"getBoardInfo","MethodSourceCode":"public BoardInfo getBoardInfo() {\n    return boardInfo;\n}","Folder":"common-board"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardCreatedEvent","MethodName":"toString","MethodSourceCode":"@Override\npublic String toString() {\n    return ToStringBuilder.reflectionToString(this);\n}","Folder":"common-board"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Board","MethodName":"getId","MethodSourceCode":"public String getId() {\n    return id;\n}","Folder":"common-board"},{"Variables":[],"Methodscalled":[],"Parameters":["id"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Board","MethodName":"setId","MethodSourceCode":"public void setId(String id) {\n    this.id = id;\n}","Folder":"common-board"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Board","MethodName":"getTitle","MethodSourceCode":"public String getTitle() {\n    return title;\n}","Folder":"common-board"},{"Variables":[],"Methodscalled":[],"Parameters":["title"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Board","MethodName":"setTitle","MethodSourceCode":"public void setTitle(String title) {\n    this.title = title;\n}","Folder":"common-board"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Board","MethodName":"getCreatedBy","MethodSourceCode":"public String getCreatedBy() {\n    return createdBy;\n}","Folder":"common-board"},{"Variables":[],"Methodscalled":[],"Parameters":["createdBy"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Board","MethodName":"setCreatedBy","MethodSourceCode":"public void setCreatedBy(String createdBy) {\n    this.createdBy = createdBy;\n}","Folder":"common-board"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Board","MethodName":"getCreatedDate","MethodSourceCode":"public Date getCreatedDate() {\n    return createdDate;\n}","Folder":"common-board"},{"Variables":[],"Methodscalled":[],"Parameters":["createdDate"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Board","MethodName":"setCreatedDate","MethodSourceCode":"public void setCreatedDate(Date createdDate) {\n    this.createdDate = createdDate;\n}","Folder":"common-board"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Board","MethodName":"getUpdatedDate","MethodSourceCode":"public Date getUpdatedDate() {\n    return updatedDate;\n}","Folder":"common-board"},{"Variables":[],"Methodscalled":[],"Parameters":["updatedDate"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Board","MethodName":"setUpdatedDate","MethodSourceCode":"public void setUpdatedDate(Date updatedDate) {\n    this.updatedDate = updatedDate;\n}","Folder":"common-board"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Board","MethodName":"getUpdatedBy","MethodSourceCode":"public String getUpdatedBy() {\n    return updatedBy;\n}","Folder":"common-board"},{"Variables":[],"Methodscalled":[],"Parameters":["updatedBy"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Board","MethodName":"setUpdatedBy","MethodSourceCode":"public void setUpdatedBy(String updatedBy) {\n    this.updatedBy = updatedBy;\n}","Folder":"common-board"},{"Variables":[],"Methodscalled":[],"Parameters":["o"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Board","MethodName":"equals","MethodSourceCode":"@Override\npublic boolean equals(Object o) {\n    return EqualsBuilder.reflectionEquals(this, o);\n}","Folder":"common-board"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Board","MethodName":"hashCode","MethodSourceCode":"@Override\npublic int hashCode() {\n    return HashCodeBuilder.reflectionHashCode(this);\n}","Folder":"common-board"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardQueryResponse","MethodName":"getData","MethodSourceCode":"public Board getData() {\n    return data;\n}","Folder":"common-board"},{"Variables":[],"Methodscalled":[],"Parameters":["data"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardQueryResponse","MethodName":"setData","MethodSourceCode":"public void setData(Board data) {\n    this.data = data;\n}","Folder":"common-board"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardResponse","MethodName":"getId","MethodSourceCode":"public String getId() {\n    return id;\n}","Folder":"common-board"},{"Variables":[],"Methodscalled":[],"Parameters":["id"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardResponse","MethodName":"setId","MethodSourceCode":"public void setId(String id) {\n    this.id = id;\n}","Folder":"common-board"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardResponse","MethodName":"getTitle","MethodSourceCode":"public String getTitle() {\n    return title;\n}","Folder":"common-board"},{"Variables":[],"Methodscalled":[],"Parameters":["title"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardResponse","MethodName":"setTitle","MethodSourceCode":"public void setTitle(String title) {\n    this.title = title;\n}","Folder":"common-board"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardResponse","MethodName":"getCreatedBy","MethodSourceCode":"public String getCreatedBy() {\n    return createdBy;\n}","Folder":"common-board"},{"Variables":[],"Methodscalled":[],"Parameters":["createdBy"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardResponse","MethodName":"setCreatedBy","MethodSourceCode":"public void setCreatedBy(String createdBy) {\n    this.createdBy = createdBy;\n}","Folder":"common-board"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardResponse","MethodName":"getCreatedDate","MethodSourceCode":"public Date getCreatedDate() {\n    return createdDate;\n}","Folder":"common-board"},{"Variables":[],"Methodscalled":[],"Parameters":["createdDate"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardResponse","MethodName":"setCreatedDate","MethodSourceCode":"public void setCreatedDate(Date createdDate) {\n    this.createdDate = createdDate;\n}","Folder":"common-board"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardResponse","MethodName":"getUpdatedDate","MethodSourceCode":"public Date getUpdatedDate() {\n    return updatedDate;\n}","Folder":"common-board"},{"Variables":[],"Methodscalled":[],"Parameters":["updatedDate"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardResponse","MethodName":"setUpdatedDate","MethodSourceCode":"public void setUpdatedDate(Date updatedDate) {\n    this.updatedDate = updatedDate;\n}","Folder":"common-board"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardResponse","MethodName":"getUpdatedBy","MethodSourceCode":"public String getUpdatedBy() {\n    return updatedBy;\n}","Folder":"common-board"},{"Variables":[],"Methodscalled":[],"Parameters":["updatedBy"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardResponse","MethodName":"setUpdatedBy","MethodSourceCode":"public void setUpdatedBy(String updatedBy) {\n    this.updatedBy = updatedBy;\n}","Folder":"common-board"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardsQueryResponse","MethodName":"getBoards","MethodSourceCode":"public List<Board> getBoards() {\n    return boards;\n}","Folder":"common-board"},{"Variables":[],"Methodscalled":[],"Parameters":["boards"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BoardsQueryResponse","MethodName":"setBoards","MethodSourceCode":"public void setBoards(List<Board> boards) {\n    this.boards = boards;\n}","Folder":"common-board"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"CommonSwaggerConfiguration","MethodName":"api","MethodSourceCode":"@Bean\npublic Docket api() {\n    return new Docket(DocumentationType.SWAGGER_2).select().apis(RequestHandlerSelectors.basePackage(\"net.chrisrichardson.eventstore.examples.kanban\")).build().pathMapping(\"/\").genericModelSubstitutes(ResponseEntity.class, CompletableFuture.class).alternateTypeRules(newRule(typeResolver.resolve(DeferredResult.class, typeResolver.resolve(ResponseEntity.class, WildcardType.class)), typeResolver.resolve(WildcardType.class))).useDefaultResponseMessages(false);\n}","Folder":"common-swagger"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"DetailedTaskEvent","MethodName":"getBoardId","MethodSourceCode":"String getBoardId();","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"DetailedTaskEvent","MethodName":"getUpdate","MethodSourceCode":"AuditEntry getUpdate();","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskBacklogEvent","MethodName":"getUpdate","MethodSourceCode":"public AuditEntry getUpdate() {\n    return update;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["update"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskBacklogEvent","MethodName":"setUpdate","MethodSourceCode":"public void setUpdate(AuditEntry update) {\n    this.update = update;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskBacklogEvent","MethodName":"toString","MethodSourceCode":"@Override\npublic String toString() {\n    return ToStringBuilder.reflectionToString(this);\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskCompletedEvent","MethodName":"getBoardId","MethodSourceCode":"@Override\npublic String getBoardId() {\n    return boardId;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["boardId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskCompletedEvent","MethodName":"setBoardId","MethodSourceCode":"public void setBoardId(String boardId) {\n    this.boardId = boardId;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskCompletedEvent","MethodName":"getUpdate","MethodSourceCode":"@Override\npublic AuditEntry getUpdate() {\n    return update;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["update"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskCompletedEvent","MethodName":"setUpdate","MethodSourceCode":"public void setUpdate(AuditEntry update) {\n    this.update = update;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskCompletedEvent","MethodName":"toString","MethodSourceCode":"@Override\npublic String toString() {\n    return ToStringBuilder.reflectionToString(this);\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskCreatedEvent","MethodName":"getTaskInfo","MethodSourceCode":"public TaskInfo getTaskInfo() {\n    return taskInfo;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskCreatedEvent","MethodName":"toString","MethodSourceCode":"@Override\npublic String toString() {\n    return ToStringBuilder.reflectionToString(this);\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskDeletedEvent","MethodName":"getBoardId","MethodSourceCode":"@Override\npublic String getBoardId() {\n    return null;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskDeletedEvent","MethodName":"getUpdate","MethodSourceCode":"@Override\npublic AuditEntry getUpdate() {\n    return update;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["update"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskDeletedEvent","MethodName":"setUpdate","MethodSourceCode":"public void setUpdate(AuditEntry update) {\n    this.update = update;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskDeletedEvent","MethodName":"toString","MethodSourceCode":"@Override\npublic String toString() {\n    return ToStringBuilder.reflectionToString(this);\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskScheduledEvent","MethodName":"getBoardId","MethodSourceCode":"@Override\npublic String getBoardId() {\n    return boardId;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["boardId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskScheduledEvent","MethodName":"setBoardId","MethodSourceCode":"public void setBoardId(String boardId) {\n    this.boardId = boardId;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskScheduledEvent","MethodName":"getUpdate","MethodSourceCode":"@Override\npublic AuditEntry getUpdate() {\n    return update;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["update"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskScheduledEvent","MethodName":"setUpdate","MethodSourceCode":"public void setUpdate(AuditEntry update) {\n    this.update = update;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskScheduledEvent","MethodName":"toString","MethodSourceCode":"@Override\npublic String toString() {\n    return ToStringBuilder.reflectionToString(this);\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskStartedEvent","MethodName":"getBoardId","MethodSourceCode":"@Override\npublic String getBoardId() {\n    return boardId;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["boardId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskStartedEvent","MethodName":"setBoardId","MethodSourceCode":"public void setBoardId(String boardId) {\n    this.boardId = boardId;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskStartedEvent","MethodName":"getUpdate","MethodSourceCode":"public AuditEntry getUpdate() {\n    return update;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["update"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskStartedEvent","MethodName":"setUpdate","MethodSourceCode":"public void setUpdate(AuditEntry update) {\n    this.update = update;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskStartedEvent","MethodName":"toString","MethodSourceCode":"@Override\npublic String toString() {\n    return ToStringBuilder.reflectionToString(this);\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskUpdatedEvent","MethodName":"getTaskDetails","MethodSourceCode":"public TaskDetails getTaskDetails() {\n    return taskDetails;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["taskDetails"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskUpdatedEvent","MethodName":"setTaskDetails","MethodSourceCode":"public void setTaskDetails(TaskDetails taskDetails) {\n    this.taskDetails = taskDetails;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskUpdatedEvent","MethodName":"getUpdate","MethodSourceCode":"public AuditEntry getUpdate() {\n    return update;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["update"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskUpdatedEvent","MethodName":"setUpdate","MethodSourceCode":"public void setUpdate(AuditEntry update) {\n    this.update = update;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskUpdatedEvent","MethodName":"toString","MethodSourceCode":"@Override\npublic String toString() {\n    return ToStringBuilder.reflectionToString(this);\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BacklogResponse","MethodName":"getTasks","MethodSourceCode":"public List<Task> getTasks() {\n    return tasks;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["tasks"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BacklogResponse","MethodName":"setTasks","MethodSourceCode":"public void setTasks(List<Task> tasks) {\n    this.tasks = tasks;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BacklogResponse","MethodName":"getBacklog","MethodSourceCode":"public List<Task> getBacklog() {\n    return backlog;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["backlog"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BacklogResponse","MethodName":"setBacklog","MethodSourceCode":"public void setBacklog(List<Task> backlog) {\n    this.backlog = backlog;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ChangeTaskStatusRequest","MethodName":"getBoardId","MethodSourceCode":"public String getBoardId() {\n    return boardId;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["boardId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ChangeTaskStatusRequest","MethodName":"setBoardId","MethodSourceCode":"public void setBoardId(String boardId) {\n    this.boardId = boardId;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"HistoryEvent","MethodName":"getId","MethodSourceCode":"public String getId() {\n    return id;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["id"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"HistoryEvent","MethodName":"setId","MethodSourceCode":"public void setId(String id) {\n    this.id = id;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"HistoryEvent","MethodName":"getEventType","MethodSourceCode":"public String getEventType() {\n    return eventType;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["eventType"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"HistoryEvent","MethodName":"setEventType","MethodSourceCode":"public void setEventType(String eventType) {\n    this.eventType = eventType;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"HistoryEvent","MethodName":"getEventData","MethodSourceCode":"public Event getEventData() {\n    return eventData;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["eventData"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"HistoryEvent","MethodName":"setEventData","MethodSourceCode":"public void setEventData(Event eventData) {\n    this.eventData = eventData;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"HistoryResponse","MethodName":"getData","MethodSourceCode":"public List<HistoryEvent> getData() {\n    return data;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["data"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"HistoryResponse","MethodName":"setData","MethodSourceCode":"public void setData(List<HistoryEvent> data) {\n    this.data = data;\n}","Folder":"common-task"},{"Variables":[{"VariableName":"res"}],"Methodscalled":[{"MethodCalled":"setId"},{"MethodCalled":"setBoardId"},{"MethodCalled":"getBoardId"},{"MethodCalled":"setTitle"},{"MethodCalled":"getTitle"},{"MethodCalled":"setCreatedBy"},{"MethodCalled":"setCreatedDate"},{"MethodCalled":"setUpdatedDate"},{"MethodCalled":"setUpdatedBy"},{"MethodCalled":"setStatus"},{"MethodCalled":"getStatus"},{"MethodCalled":"setDeleted"},{"MethodCalled":"isDeleted"},{"MethodCalled":"setDescription"},{"MethodCalled":"getDescription"},{"MethodCalled":"getDescription"},{"MethodCalled":"getDescription"}],"Parameters":["id","taskInfo"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Task","MethodName":"transform","MethodSourceCode":"public static Task transform(String id, TaskInfo taskInfo) {\n    Task res = new Task();\n    res.setId(id);\n    res.setBoardId(taskInfo.getBoardId());\n    res.setTitle(taskInfo.getTaskDetails().getTitle());\n    res.setCreatedBy(taskInfo.getCreation().getWho());\n    res.setCreatedDate(taskInfo.getCreation().getWhen());\n    res.setUpdatedDate(taskInfo.getUpdate().getWhen());\n    res.setUpdatedBy(taskInfo.getUpdate().getWho());\n    res.setStatus(taskInfo.getStatus());\n    res.setDeleted(taskInfo.isDeleted());\n    res.setDescription(taskInfo.getTaskDetails().getDescription() != null ? taskInfo.getTaskDetails().getDescription().getDescription() : null);\n    return res;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Task","MethodName":"getId","MethodSourceCode":"public String getId() {\n    return id;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["id"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Task","MethodName":"setId","MethodSourceCode":"public void setId(String id) {\n    this.id = id;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Task","MethodName":"getBoardId","MethodSourceCode":"public String getBoardId() {\n    return boardId;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["boardId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Task","MethodName":"setBoardId","MethodSourceCode":"public void setBoardId(String boardId) {\n    this.boardId = boardId;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Task","MethodName":"getTitle","MethodSourceCode":"public String getTitle() {\n    return title;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["title"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Task","MethodName":"setTitle","MethodSourceCode":"public void setTitle(String title) {\n    this.title = title;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Task","MethodName":"getCreatedBy","MethodSourceCode":"public String getCreatedBy() {\n    return createdBy;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["createdBy"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Task","MethodName":"setCreatedBy","MethodSourceCode":"public void setCreatedBy(String createdBy) {\n    this.createdBy = createdBy;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Task","MethodName":"getUpdatedBy","MethodSourceCode":"public String getUpdatedBy() {\n    return updatedBy;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["updatedBy"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Task","MethodName":"setUpdatedBy","MethodSourceCode":"public void setUpdatedBy(String updatedBy) {\n    this.updatedBy = updatedBy;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Task","MethodName":"getCreatedDate","MethodSourceCode":"public Date getCreatedDate() {\n    return createdDate;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["createdDate"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Task","MethodName":"setCreatedDate","MethodSourceCode":"public void setCreatedDate(Date createdDate) {\n    this.createdDate = createdDate;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Task","MethodName":"getUpdatedDate","MethodSourceCode":"public Date getUpdatedDate() {\n    return updatedDate;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["updatedDate"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Task","MethodName":"setUpdatedDate","MethodSourceCode":"public void setUpdatedDate(Date updatedDate) {\n    this.updatedDate = updatedDate;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Task","MethodName":"getStatus","MethodSourceCode":"public TaskStatus getStatus() {\n    return status;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["status"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Task","MethodName":"setStatus","MethodSourceCode":"public void setStatus(TaskStatus status) {\n    this.status = status;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Task","MethodName":"isDeleted","MethodSourceCode":"public boolean isDeleted() {\n    return deleted;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["deleted"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Task","MethodName":"setDeleted","MethodSourceCode":"public void setDeleted(boolean deleted) {\n    this.deleted = deleted;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Task","MethodName":"getDescription","MethodSourceCode":"public String getDescription() {\n    return description;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["description"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Task","MethodName":"setDescription","MethodSourceCode":"public void setDescription(String description) {\n    this.description = description;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["o"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Task","MethodName":"equals","MethodSourceCode":"@Override\npublic boolean equals(Object o) {\n    return EqualsBuilder.reflectionEquals(this, o);\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"Task","MethodName":"hashCode","MethodSourceCode":"@Override\npublic int hashCode() {\n    return HashCodeBuilder.reflectionHashCode(this);\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskResponse","MethodName":"getId","MethodSourceCode":"public String getId() {\n    return id;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["id"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskResponse","MethodName":"setId","MethodSourceCode":"public void setId(String id) {\n    this.id = id;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskResponse","MethodName":"getBoardId","MethodSourceCode":"public String getBoardId() {\n    return boardId;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["boardId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskResponse","MethodName":"setBoardId","MethodSourceCode":"public void setBoardId(String boardId) {\n    this.boardId = boardId;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskResponse","MethodName":"getTitle","MethodSourceCode":"public String getTitle() {\n    return title;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["title"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskResponse","MethodName":"setTitle","MethodSourceCode":"public void setTitle(String title) {\n    this.title = title;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskResponse","MethodName":"getCreatedBy","MethodSourceCode":"public String getCreatedBy() {\n    return createdBy;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["createdBy"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskResponse","MethodName":"setCreatedBy","MethodSourceCode":"public void setCreatedBy(String createdBy) {\n    this.createdBy = createdBy;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskResponse","MethodName":"getUpdatedBy","MethodSourceCode":"public String getUpdatedBy() {\n    return updatedBy;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["updatedBy"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskResponse","MethodName":"setUpdatedBy","MethodSourceCode":"public void setUpdatedBy(String updatedBy) {\n    this.updatedBy = updatedBy;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskResponse","MethodName":"getCreatedDate","MethodSourceCode":"public Date getCreatedDate() {\n    return createdDate;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["createdDate"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskResponse","MethodName":"setCreatedDate","MethodSourceCode":"public void setCreatedDate(Date createdDate) {\n    this.createdDate = createdDate;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskResponse","MethodName":"getUpdatedDate","MethodSourceCode":"public Date getUpdatedDate() {\n    return updatedDate;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["updatedDate"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskResponse","MethodName":"setUpdatedDate","MethodSourceCode":"public void setUpdatedDate(Date updatedDate) {\n    this.updatedDate = updatedDate;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskResponse","MethodName":"getStatus","MethodSourceCode":"public TaskStatus getStatus() {\n    return status;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["status"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskResponse","MethodName":"setStatus","MethodSourceCode":"public void setStatus(TaskStatus status) {\n    this.status = status;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskResponse","MethodName":"isDeleted","MethodSourceCode":"public boolean isDeleted() {\n    return deleted;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["deleted"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskResponse","MethodName":"setDeleted","MethodSourceCode":"public void setDeleted(boolean deleted) {\n    this.deleted = deleted;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskResponse","MethodName":"getDescription","MethodSourceCode":"public TaskDescription getDescription() {\n    return description;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["description"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskResponse","MethodName":"setDescription","MethodSourceCode":"public void setDescription(TaskDescription description) {\n    this.description = description;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskDescription","MethodName":"getDescription","MethodSourceCode":"public String getDescription() {\n    return description;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["description"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskDescription","MethodName":"setDescription","MethodSourceCode":"public void setDescription(String description) {\n    this.description = description;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["o"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskDescription","MethodName":"equals","MethodSourceCode":"@Override\npublic boolean equals(Object o) {\n    return EqualsBuilder.reflectionEquals(this, o);\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskDescription","MethodName":"hashCode","MethodSourceCode":"@Override\npublic int hashCode() {\n    return HashCodeBuilder.reflectionHashCode(this);\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskDetails","MethodName":"getTitle","MethodSourceCode":"public String getTitle() {\n    return title;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["title"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskDetails","MethodName":"setTitle","MethodSourceCode":"public void setTitle(String title) {\n    this.title = title;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskDetails","MethodName":"getDescription","MethodSourceCode":"public TaskDescription getDescription() {\n    return description;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["description"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskDetails","MethodName":"setDescription","MethodSourceCode":"public void setDescription(TaskDescription description) {\n    this.description = description;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskDetails","MethodName":"toString","MethodSourceCode":"@Override\npublic String toString() {\n    return ToStringBuilder.reflectionToString(this);\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["o"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskDetails","MethodName":"equals","MethodSourceCode":"@Override\npublic boolean equals(Object o) {\n    return EqualsBuilder.reflectionEquals(this, o);\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskDetails","MethodName":"hashCode","MethodSourceCode":"@Override\npublic int hashCode() {\n    return HashCodeBuilder.reflectionHashCode(this);\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskInfo","MethodName":"getBoardId","MethodSourceCode":"public String getBoardId() {\n    return boardId;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["boardId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskInfo","MethodName":"setBoardId","MethodSourceCode":"public void setBoardId(String boardId) {\n    this.boardId = boardId;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskInfo","MethodName":"getTaskDetails","MethodSourceCode":"public TaskDetails getTaskDetails() {\n    return taskDetails;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["taskDetails"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskInfo","MethodName":"setTaskDetails","MethodSourceCode":"public void setTaskDetails(TaskDetails taskDetails) {\n    this.taskDetails = taskDetails;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskInfo","MethodName":"getCreation","MethodSourceCode":"public AuditEntry getCreation() {\n    return creation;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["creation"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskInfo","MethodName":"setCreation","MethodSourceCode":"public void setCreation(AuditEntry creation) {\n    this.creation = creation;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskInfo","MethodName":"getUpdate","MethodSourceCode":"public AuditEntry getUpdate() {\n    return update;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["update"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskInfo","MethodName":"setUpdate","MethodSourceCode":"public void setUpdate(AuditEntry update) {\n    this.update = update;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskInfo","MethodName":"getStatus","MethodSourceCode":"public TaskStatus getStatus() {\n    return status;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["status"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskInfo","MethodName":"setStatus","MethodSourceCode":"public void setStatus(TaskStatus status) {\n    this.status = status;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskInfo","MethodName":"isDeleted","MethodSourceCode":"public boolean isDeleted() {\n    return deleted;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":["deleted"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskInfo","MethodName":"setDeleted","MethodSourceCode":"public void setDeleted(boolean deleted) {\n    this.deleted = deleted;\n}","Folder":"common-task"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskInfo","MethodName":"toString","MethodSourceCode":"@Override\npublic String toString() {\n    return ToStringBuilder.reflectionToString(this);\n}","Folder":"common-task"},{"Variables":[{"VariableName":"response"},{"VariableName":"request"}],"Methodscalled":[{"MethodCalled":"doFilter"}],"Parameters":["req","res","chain"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"CORSFilter","MethodName":"doFilter","MethodSourceCode":"public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {\n    HttpServletResponse response = (HttpServletResponse) res;\n    HttpServletRequest request = (HttpServletRequest) req;\n    response.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n    response.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n    response.setHeader(\"Access-Control-Allow-Methods\", \"POST, PUT, GET, OPTIONS, DELETE, PATCH\");\n    response.setHeader(\"Access-Control-Allow-Headers\", \"x-requested-with, x-access-token, origin, content-type, accept\");\n    response.setHeader(\"Access-Control-Max-Age\", \"31536000\");\n    chain.doFilter(req, res);\n}","Folder":"common-web"},{"Variables":[],"Methodscalled":[],"Parameters":["filterConfig"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"CORSFilter","MethodName":"init","MethodSourceCode":"public void init(FilterConfig filterConfig) {\n}","Folder":"common-web"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"CORSFilter","MethodName":"destroy","MethodSourceCode":"public void destroy() {\n}","Folder":"common-web"},{"Variables":[],"Methodscalled":[],"Parameters":["request","response","e"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"HttpExceptionHandler","MethodName":"defaultErrorHandler","MethodSourceCode":"@ExceptionHandler(Exception.class)\n@ResponseBody\npublic ResponseEntity defaultErrorHandler(HttpServletRequest request, HttpServletResponse response, Exception e) throws Exception {\n    logger.error(\"Exception occured!\", e);\n    if (e instanceof NoSuchElementException) {\n        return ResponseEntity.notFound().build();\n    }\n    return ResponseEntity.badRequest().build();\n}","Folder":"common-web"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"WebConfiguration","MethodName":"httpRequestContextListener","MethodSourceCode":"@Bean\npublic ServletListenerRegistrationBean<RequestContextListener> httpRequestContextListener() {\n    return new ServletListenerRegistrationBean<RequestContextListener>(new RequestContextListener());\n}","Folder":"common-web"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"KanbanWebSocketEvent","MethodName":"getEventId","MethodSourceCode":"public String getEventId() {\n    return eventId;\n}","Folder":"common-websocket"},{"Variables":[],"Methodscalled":[],"Parameters":["eventId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"KanbanWebSocketEvent","MethodName":"setEventId","MethodSourceCode":"public void setEventId(String eventId) {\n    this.eventId = eventId;\n}","Folder":"common-websocket"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"KanbanWebSocketEvent","MethodName":"getEventType","MethodSourceCode":"public String getEventType() {\n    return eventType;\n}","Folder":"common-websocket"},{"Variables":[],"Methodscalled":[],"Parameters":["eventType"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"KanbanWebSocketEvent","MethodName":"setEventType","MethodSourceCode":"public void setEventType(String eventType) {\n    this.eventType = eventType;\n}","Folder":"common-websocket"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"KanbanWebSocketEvent","MethodName":"getEventData","MethodSourceCode":"public String getEventData() {\n    return eventData;\n}","Folder":"common-websocket"},{"Variables":[],"Methodscalled":[],"Parameters":["eventData"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"KanbanWebSocketEvent","MethodName":"setEventData","MethodSourceCode":"public void setEventData(String eventData) {\n    this.eventData = eventData;\n}","Folder":"common-websocket"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"KanbanWebSocketEvent","MethodName":"getEntityId","MethodSourceCode":"public String getEntityId() {\n    return entityId;\n}","Folder":"common-websocket"},{"Variables":[],"Methodscalled":[],"Parameters":["entityId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"KanbanWebSocketEvent","MethodName":"setEntityId","MethodSourceCode":"public void setEntityId(String entityId) {\n    this.entityId = entityId;\n}","Folder":"common-websocket"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"KanbanWebSocketEvent","MethodName":"toString","MethodSourceCode":"@Override\npublic String toString() {\n    return ToStringBuilder.reflectionToString(this);\n}","Folder":"common-websocket"},{"Variables":[],"Methodscalled":[],"Parameters":["registry"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"WebSocketConfig","MethodName":"registerStompEndpoints","MethodSourceCode":"@Override\npublic void registerStompEndpoints(StompEndpointRegistry registry) {\n    registry.addEndpoint(\"/events\").withSockJS();\n}","Folder":"common-websocket"},{"Variables":[],"Methodscalled":[],"Parameters":["config"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"WebSocketConfig","MethodName":"configureMessageBroker","MethodSourceCode":"@Override\npublic void configureMessageBroker(MessageBrokerRegistry config) {\n    config.enableSimpleBroker(\"/events\");\n}","Folder":"common-websocket"},{"Variables":[{"VariableName":"board"}],"Methodscalled":[{"MethodCalled":"sendEvent"}],"Parameters":["de"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"WebsocketEventsTranslator","MethodName":"sendBoardEvents","MethodSourceCode":"@EventHandlerMethod\npublic void sendBoardEvents(DispatchedEvent<BoardCreatedEvent> de) throws JsonProcessingException {\n    Board board = new Board();\n    board.setId(de.getEntityId());\n    board.setTitle(de.getEvent().getBoardInfo().getTitle());\n    board.setCreatedBy(de.getEvent().getBoardInfo().getCreation().getWho());\n    board.setCreatedDate(de.getEvent().getBoardInfo().getCreation().getWhen());\n    board.setUpdatedBy(de.getEvent().getBoardInfo().getUpdate().getWho());\n    board.setUpdatedDate(de.getEvent().getBoardInfo().getUpdate().getWhen());\n    this.sendEvent(de, DESTINATION_DEFAULT_URL, objectMapper.writeValueAsString(board));\n}","Folder":"common-websocket"},{"Variables":[{"VariableName":"task"}],"Methodscalled":[{"MethodCalled":"sendEvent"}],"Parameters":["de"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"WebsocketEventsTranslator","MethodName":"sendTaskCreatedEvent","MethodSourceCode":"@EventHandlerMethod\npublic void sendTaskCreatedEvent(DispatchedEvent<TaskCreatedEvent> de) throws JsonProcessingException {\n    Task task = Task.transform(de.getEntityId(), de.getEvent().getTaskInfo());\n    this.sendEvent(de, DESTINATION_DEFAULT_URL, objectMapper.writeValueAsString(task));\n}","Folder":"common-websocket"},{"Variables":[{"VariableName":"task"}],"Methodscalled":[{"MethodCalled":"sendEvent"}],"Parameters":["de"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"WebsocketEventsTranslator","MethodName":"sendTaskMovedToBacklogEvent","MethodSourceCode":"@EventHandlerMethod\npublic void sendTaskMovedToBacklogEvent(DispatchedEvent<TaskBacklogEvent> de) throws JsonProcessingException {\n    Task task = new Task();\n    task.setId(de.getEntityId());\n    task.setUpdatedBy(de.getEvent().getUpdate().getWho());\n    task.setUpdatedDate(de.getEvent().getUpdate().getWhen());\n    task.setBoardId(\"\");\n    task.setStatus(TaskStatus.backlog);\n    this.sendEvent(de, DESTINATION_DEFAULT_URL, objectMapper.writeValueAsString(task));\n}","Folder":"common-websocket"},{"Variables":[{"VariableName":"task"}],"Methodscalled":[{"MethodCalled":"sendEvent"}],"Parameters":["de"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"WebsocketEventsTranslator","MethodName":"sendTaskCompletedEvent","MethodSourceCode":"@EventHandlerMethod\npublic void sendTaskCompletedEvent(DispatchedEvent<TaskCompletedEvent> de) throws JsonProcessingException {\n    Task task = new Task();\n    task.setId(de.getEntityId());\n    task.setBoardId(de.getEvent().getBoardId());\n    task.setUpdatedBy(de.getEvent().getUpdate().getWho());\n    task.setUpdatedDate(de.getEvent().getUpdate().getWhen());\n    task.setStatus(TaskStatus.completed);\n    this.sendEvent(de, DESTINATION_DEFAULT_URL, objectMapper.writeValueAsString(task));\n}","Folder":"common-websocket"},{"Variables":[{"VariableName":"task"}],"Methodscalled":[{"MethodCalled":"sendEvent"}],"Parameters":["de"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"WebsocketEventsTranslator","MethodName":"sendTaskDeletedEvent","MethodSourceCode":"@EventHandlerMethod\npublic void sendTaskDeletedEvent(DispatchedEvent<TaskDeletedEvent> de) throws JsonProcessingException {\n    Task task = new Task();\n    task.setId(de.getEntityId());\n    task.setUpdatedBy(de.getEvent().getUpdate().getWho());\n    task.setUpdatedDate(de.getEvent().getUpdate().getWhen());\n    task.setDeleted(true);\n    this.sendEvent(de, DESTINATION_DEFAULT_URL, objectMapper.writeValueAsString(task));\n}","Folder":"common-websocket"},{"Variables":[{"VariableName":"task"}],"Methodscalled":[{"MethodCalled":"sendEvent"}],"Parameters":["de"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"WebsocketEventsTranslator","MethodName":"sendTaskScheduledEvent","MethodSourceCode":"@EventHandlerMethod\npublic void sendTaskScheduledEvent(DispatchedEvent<TaskScheduledEvent> de) throws JsonProcessingException {\n    Task task = new Task();\n    task.setId(de.getEntityId());\n    task.setBoardId(de.getEvent().getBoardId());\n    task.setUpdatedBy(de.getEvent().getUpdate().getWho());\n    task.setUpdatedDate(de.getEvent().getUpdate().getWhen());\n    task.setStatus(TaskStatus.scheduled);\n    this.sendEvent(de, DESTINATION_DEFAULT_URL, objectMapper.writeValueAsString(task));\n}","Folder":"common-websocket"},{"Variables":[{"VariableName":"task"}],"Methodscalled":[{"MethodCalled":"sendEvent"}],"Parameters":["de"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"WebsocketEventsTranslator","MethodName":"sendTaskStartedEvent","MethodSourceCode":"@EventHandlerMethod\npublic void sendTaskStartedEvent(DispatchedEvent<TaskStartedEvent> de) throws JsonProcessingException {\n    Task task = new Task();\n    task.setId(de.getEntityId());\n    task.setBoardId(de.getEvent().getBoardId());\n    task.setUpdatedBy(de.getEvent().getUpdate().getWho());\n    task.setUpdatedDate(de.getEvent().getUpdate().getWhen());\n    task.setStatus(TaskStatus.started);\n    this.sendEvent(de, DESTINATION_DEFAULT_URL, objectMapper.writeValueAsString(task));\n}","Folder":"common-websocket"},{"Variables":[{"VariableName":"task"}],"Methodscalled":[{"MethodCalled":"sendEvent"}],"Parameters":["de"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"WebsocketEventsTranslator","MethodName":"sendTaskUpdatedEvent","MethodSourceCode":"@EventHandlerMethod\npublic void sendTaskUpdatedEvent(DispatchedEvent<TaskUpdatedEvent> de) throws JsonProcessingException {\n    Task task = new Task();\n    task.setId(de.getEntityId());\n    task.setTitle(de.getEvent().getTaskDetails().getTitle());\n    task.setDescription(de.getEvent().getTaskDetails().getDescription() != null ? de.getEvent().getTaskDetails().getDescription().getDescription() : null);\n    task.setUpdatedBy(de.getEvent().getUpdate().getWho());\n    task.setUpdatedDate(de.getEvent().getUpdate().getWhen());\n    this.sendEvent(de, DESTINATION_DEFAULT_URL, objectMapper.writeValueAsString(task));\n}","Folder":"common-websocket"},{"Variables":[{"VariableName":"event"}],"Methodscalled":[],"Parameters":["de","destination","eventData"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"WebsocketEventsTranslator","MethodName":"sendEvent","MethodSourceCode":"private void sendEvent(DispatchedEvent<? extends Event> de, String destination, String eventData) throws JsonProcessingException {\n    log.info(\"Sending board event to websocket : {}\", de.getEvent());\n    KanbanWebSocketEvent event = new KanbanWebSocketEvent();\n    event.setEntityId(de.getEntityId());\n    event.setEventData(eventData);\n    event.setEventId(de.getEventId().asString());\n    event.setEventType(de.getEventType().getName());\n    template.convertAndSend(destination, objectMapper.writeValueAsString(event));\n}","Folder":"common-websocket"},{"Variables":[],"Methodscalled":[],"Parameters":["messages"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"WebSocketSecurityConfig","MethodName":"configureInbound","MethodSourceCode":"protected void configureInbound(MessageSecurityMetadataSourceRegistry messages) {\n    messages.anyMessage().permitAll();\n}","Folder":"common-websocket"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"\n     * Disables CSRF for Websockets.\n     ","ClassName":"WebSocketSecurityConfig","MethodName":"sameOriginDisabled","MethodSourceCode":"/**\n * Disables CSRF for Websockets.\n */\n@Override\nprotected boolean sameOriginDisabled() {\n    return true;\n}","Folder":"common-websocket"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AuthControllerTest","MethodName":"getPort","MethodSourceCode":"@Override\nprotected int getPort() {\n    return this.port;\n}","Folder":"e2e-test"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AuthControllerTest","MethodName":"getHost","MethodSourceCode":"@Override\nprotected String getHost() {\n    return hostName;\n}","Folder":"e2e-test"},{"Variables":[],"Methodscalled":[],"Parameters":["template"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"E2ETestConfiguration","MethodName":"websocketEventsTranslator","MethodSourceCode":"@Bean\npublic WebsocketEventsTranslator websocketEventsTranslator(SimpMessagingTemplate template) {\n    return new WebsocketEventsTranslator(template);\n}","Folder":"e2e-test"},{"Variables":[{"VariableName":"converter"},{"VariableName":"httpClient"},{"VariableName":"restTemplate"}],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"E2ETestConfiguration","MethodName":"restTemplate","MethodSourceCode":"@Bean\npublic RestTemplate restTemplate() {\n    // we have to define Apache HTTP client to use the PATCH verb\n    MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();\n    converter.setSupportedMediaTypes(MediaType.parseMediaTypes(\"application/json\"));\n    converter.setObjectMapper(new ObjectMapper());\n    HttpClient httpClient = HttpClients.createDefault();\n    RestTemplate restTemplate = new RestTemplate(Collections.<HttpMessageConverter<?>>singletonList(converter));\n    restTemplate.setRequestFactory(new HttpComponentsClientHttpRequestFactory(httpClient));\n    return restTemplate;\n}","Folder":"e2e-test"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"RestApiTest","MethodName":"getPort","MethodSourceCode":"@Override\nprotected int getPort() {\n    return this.port;\n}","Folder":"e2e-test"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"RestApiTest","MethodName":"getHost","MethodSourceCode":"@Override\nprotected String getHost() {\n    return hostName;\n}","Folder":"e2e-test"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"RestApiTest","MethodName":"getApplicationContext","MethodSourceCode":"@Override\nprotected ApplicationContext getApplicationContext() {\n    return applicationContext;\n}","Folder":"e2e-test"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"StompApiTest","MethodName":"getPort","MethodSourceCode":"@Override\nprotected int getPort() {\n    return this.port;\n}","Folder":"e2e-test"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"StompApiTest","MethodName":"getHost","MethodSourceCode":"@Override\nprotected String getHost() {\n    return hostName;\n}","Folder":"e2e-test"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"StompApiTest","MethodName":"getApplicationContext","MethodSourceCode":"@Override\nprotected ApplicationContext getApplicationContext() {\n    return applicationContext;\n}","Folder":"e2e-test"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AuthControllerTest","MethodName":"getPort","MethodSourceCode":"@Override\nprotected int getPort() {\n    return port;\n}","Folder":"rest-api-integration-tests"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AuthControllerTest","MethodName":"getHost","MethodSourceCode":"@Override\nprotected String getHost() {\n    return \"localhost\";\n}","Folder":"rest-api-integration-tests"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"RestApiTest","MethodName":"getPort","MethodSourceCode":"@Override\nprotected int getPort() {\n    return port;\n}","Folder":"rest-api-integration-tests"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"RestApiTest","MethodName":"getHost","MethodSourceCode":"@Override\nprotected String getHost() {\n    return \"localhost\";\n}","Folder":"rest-api-integration-tests"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"RestApiTest","MethodName":"getApplicationContext","MethodSourceCode":"@Override\nprotected ApplicationContext getApplicationContext() {\n    return applicationContext;\n}","Folder":"rest-api-integration-tests"},{"Variables":[],"Methodscalled":[],"Parameters":["template"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"RestAPITestConfiguration","MethodName":"websocketEventsTranslator","MethodSourceCode":"@Bean\npublic WebsocketEventsTranslator websocketEventsTranslator(SimpMessagingTemplate template) {\n    return new WebsocketEventsTranslator(template);\n}","Folder":"rest-api-integration-tests"},{"Variables":[{"VariableName":"converter"},{"VariableName":"httpClient"},{"VariableName":"restTemplate"}],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"RestAPITestConfiguration","MethodName":"restTemplate","MethodSourceCode":"@Bean\npublic RestTemplate restTemplate() {\n    // we have to define Apache HTTP client to use the PATCH verb\n    MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();\n    converter.setSupportedMediaTypes(MediaType.parseMediaTypes(\"application/json\"));\n    converter.setObjectMapper(new ObjectMapper());\n    HttpClient httpClient = HttpClients.createDefault();\n    RestTemplate restTemplate = new RestTemplate(Collections.<HttpMessageConverter<?>>singletonList(converter));\n    restTemplate.setRequestFactory(new HttpComponentsClientHttpRequestFactory(httpClient));\n    return restTemplate;\n}","Folder":"rest-api-integration-tests"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"StompApiTest","MethodName":"getPort","MethodSourceCode":"@Override\nprotected int getPort() {\n    return port;\n}","Folder":"rest-api-integration-tests"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"StompApiTest","MethodName":"getHost","MethodSourceCode":"@Override\nprotected String getHost() {\n    return \"localhost\";\n}","Folder":"rest-api-integration-tests"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"StompApiTest","MethodName":"getApplicationContext","MethodSourceCode":"@Override\nprotected ApplicationContext getApplicationContext() {\n    return applicationContext;\n}","Folder":"rest-api-integration-tests"},{"Variables":[],"Methodscalled":[],"Parameters":["args"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"StandaloneServiceMain","MethodName":"main","MethodSourceCode":"public static void main(String[] args) {\n    SpringApplication.run(StandaloneServiceConfiguration.class, args);\n}","Folder":"standalone-service"},{"Variables":[],"Methodscalled":[],"Parameters":["template"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"StandaloneServiceConfiguration","MethodName":"websocketEventsTranslator","MethodSourceCode":"@Bean\npublic WebsocketEventsTranslator websocketEventsTranslator(SimpMessagingTemplate template) {\n    return new WebsocketEventsTranslator(template);\n}","Folder":"standalone-service"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"CompleteTaskCommand","MethodName":"getBoardId","MethodSourceCode":"public String getBoardId() {\n    return boardId;\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"CompleteTaskCommand","MethodName":"getUpdate","MethodSourceCode":"public AuditEntry getUpdate() {\n    return update;\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"CompleteTaskCommand","MethodName":"toString","MethodSourceCode":"@Override\npublic String toString() {\n    return ToStringBuilder.reflectionToString(this);\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"CreateTaskCommand","MethodName":"getTaskInfo","MethodSourceCode":"public TaskInfo getTaskInfo() {\n    return taskInfo;\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"CreateTaskCommand","MethodName":"toString","MethodSourceCode":"@Override\npublic String toString() {\n    return ToStringBuilder.reflectionToString(this);\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"DeleteTaskCommand","MethodName":"getUpdate","MethodSourceCode":"public AuditEntry getUpdate() {\n    return update;\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"MoveToBacklogTaskCommand","MethodName":"getUpdate","MethodSourceCode":"public AuditEntry getUpdate() {\n    return update;\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"MoveToBacklogTaskCommand","MethodName":"toString","MethodSourceCode":"@Override\npublic String toString() {\n    return ToStringBuilder.reflectionToString(this);\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ScheduleTaskCommand","MethodName":"getBoardId","MethodSourceCode":"public String getBoardId() {\n    return boardId;\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ScheduleTaskCommand","MethodName":"getUpdate","MethodSourceCode":"public AuditEntry getUpdate() {\n    return update;\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ScheduleTaskCommand","MethodName":"toString","MethodSourceCode":"@Override\npublic String toString() {\n    return ToStringBuilder.reflectionToString(this);\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"StartTaskCommand","MethodName":"getBoardId","MethodSourceCode":"public String getBoardId() {\n    return boardId;\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"StartTaskCommand","MethodName":"getUpdate","MethodSourceCode":"public AuditEntry getUpdate() {\n    return update;\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"StartTaskCommand","MethodName":"toString","MethodSourceCode":"@Override\npublic String toString() {\n    return ToStringBuilder.reflectionToString(this);\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":["cmd"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskAggregate","MethodName":"process","MethodSourceCode":"public List<Event> process(CreateTaskCommand cmd) {\n    log.info(\"Calling TaskAggregate.process for CreateTaskCommand : {}\", cmd);\n    return EventUtil.events(new TaskCreatedEvent(cmd.getTaskInfo()));\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":["cmd"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskAggregate","MethodName":"process","MethodSourceCode":"public List<Event> process(UpdateTaskCommand cmd) {\n    log.info(\"Calling TaskAggregate.process for UpdateTaskCommand : {}\", cmd);\n    return EventUtil.events(new TaskUpdatedEvent(cmd.getTaskDetails(), cmd.getUpdate()));\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":["cmd"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskAggregate","MethodName":"process","MethodSourceCode":"public List<Event> process(DeleteTaskCommand cmd) {\n    log.info(\"Calling TaskAggregate.process for UpdateTaskCommand : {}\", cmd);\n    return EventUtil.events(new TaskDeletedEvent(cmd.getUpdate()));\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":["cmd"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskAggregate","MethodName":"process","MethodSourceCode":"public List<Event> process(StartTaskCommand cmd) {\n    log.info(\"Calling TaskAggregate.process for StartTaskCommand : {}\", cmd);\n    return EventUtil.events(new TaskStartedEvent(cmd.getBoardId(), cmd.getUpdate()));\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":["cmd"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskAggregate","MethodName":"process","MethodSourceCode":"public List<Event> process(ScheduleTaskCommand cmd) {\n    log.info(\"Calling TaskAggregate.process for ScheduleTaskCommand : {}\", cmd);\n    return EventUtil.events(new TaskScheduledEvent(cmd.getBoardId(), cmd.getUpdate()));\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":["cmd"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskAggregate","MethodName":"process","MethodSourceCode":"public List<Event> process(CompleteTaskCommand cmd) {\n    log.info(\"Calling TaskAggregate.process for CompleteTaskCommand : {}\", cmd);\n    return EventUtil.events(new TaskCompletedEvent(cmd.getBoardId(), cmd.getUpdate()));\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":["cmd"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskAggregate","MethodName":"process","MethodSourceCode":"public List<Event> process(MoveToBacklogTaskCommand cmd) {\n    log.info(\"Calling TaskAggregate.process for BacklogTaskCommand : {}\", cmd);\n    return EventUtil.events(new TaskBacklogEvent(cmd.getUpdate()));\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":["event"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskAggregate","MethodName":"apply","MethodSourceCode":"public void apply(TaskCreatedEvent event) {\n    log.info(\"Calling TaskAggregate.APPLY for TaskCreatedEvent : {}\", event);\n    this.task = event.getTaskInfo();\n    this.task.setUpdate(event.getTaskInfo().getUpdate());\n    this.task.setCreation(event.getTaskInfo().getCreation());\n    this.task.setStatus(TaskStatus.backlog);\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":["event"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskAggregate","MethodName":"apply","MethodSourceCode":"public void apply(TaskDeletedEvent event) {\n    log.info(\"Calling TaskAggregate.APPLY for TaskDeletedEvent : {}\", event);\n    this.task.setUpdate(event.getUpdate());\n    this.task.setDeleted(true);\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":["event"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskAggregate","MethodName":"apply","MethodSourceCode":"public void apply(TaskUpdatedEvent event) {\n    log.info(\"Calling TaskAggregate.APPLY for TaskUpdatedEvent : {}\", event);\n    this.task.setTaskDetails(event.getTaskDetails());\n    this.task.setUpdate(event.getUpdate());\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":["event"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskAggregate","MethodName":"apply","MethodSourceCode":"public void apply(TaskStartedEvent event) {\n    log.info(\"Calling TaskAggregate.APPLY for TaskStartedEvent : {}\", event);\n    this.task.setStatus(TaskStatus.started);\n    this.task.setBoardId(event.getBoardId());\n    this.task.setUpdate(event.getUpdate());\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":["event"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskAggregate","MethodName":"apply","MethodSourceCode":"public void apply(TaskScheduledEvent event) {\n    log.info(\"Calling TaskAggregate.APPLY for TaskScheduledEvent : {}\", event);\n    this.task.setStatus(TaskStatus.scheduled);\n    this.task.setBoardId(event.getBoardId());\n    this.task.setUpdate(event.getUpdate());\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":["event"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskAggregate","MethodName":"apply","MethodSourceCode":"public void apply(TaskCompletedEvent event) {\n    log.info(\"Calling TaskAggregate.APPLY for TaskCompletedEvent : {}\", event);\n    this.task.setStatus(TaskStatus.completed);\n    this.task.setBoardId(event.getBoardId());\n    this.task.setUpdate(event.getUpdate());\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":["event"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskAggregate","MethodName":"apply","MethodSourceCode":"public void apply(TaskBacklogEvent event) {\n    log.info(\"Calling TaskAggregate.APPLY for TaskMovedToBacklogEvent : {}\", event);\n    this.task.setStatus(TaskStatus.backlog);\n    this.task.setUpdate(event.getUpdate());\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskAggregate","MethodName":"getTask","MethodSourceCode":"public TaskInfo getTask() {\n    return task;\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":["task"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskCommandController","MethodName":"saveTask","MethodSourceCode":"@RequestMapping(value = \"/tasks\", method = POST)\npublic CompletableFuture<TaskResponse> saveTask(@RequestBody TaskInfo task) {\n    return taskService.save(task).thenApply(this::makeTaskResponse);\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[{"MethodCalled":"getCurrentUser"}],"Parameters":["taskId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskCommandController","MethodName":"deleteTask","MethodSourceCode":"@RequestMapping(value = \"/tasks/{id}\", method = DELETE)\npublic CompletableFuture<TaskResponse> deleteTask(@PathVariable(\"id\") String taskId) {\n    return taskService.remove(taskId, getCurrentUser()).thenApply(this::makeTaskResponse);\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[{"MethodCalled":"getCurrentUser"}],"Parameters":["taskId","request"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskCommandController","MethodName":"updateTask","MethodSourceCode":"@RequestMapping(value = \"/tasks/{id}\", method = PUT)\npublic CompletableFuture<TaskResponse> updateTask(@PathVariable(\"id\") String taskId, @RequestBody TaskDetails request) {\n    return taskService.update(taskId, request, getCurrentUser()).thenApply(this::makeTaskResponse);\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[{"MethodCalled":"startTask"},{"MethodCalled":"getCurrentUser"}],"Parameters":["taskId","request"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskCommandController","MethodName":"startTask","MethodSourceCode":"@RequestMapping(value = \"/tasks/{id}/start\", method = PUT)\npublic CompletableFuture<TaskResponse> startTask(@PathVariable(\"id\") String taskId, @RequestBody ChangeTaskStatusRequest request) {\n    return taskService.startTask(taskId, request.getBoardId(), getCurrentUser()).thenApply(this::makeTaskResponse);\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[{"MethodCalled":"scheduleTask"},{"MethodCalled":"getCurrentUser"}],"Parameters":["taskId","request"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskCommandController","MethodName":"scheduleTask","MethodSourceCode":"@RequestMapping(value = \"/tasks/{id}/schedule\", method = PUT)\npublic CompletableFuture<TaskResponse> scheduleTask(@PathVariable(\"id\") String taskId, @RequestBody ChangeTaskStatusRequest request) {\n    return taskService.scheduleTask(taskId, request.getBoardId(), getCurrentUser()).thenApply(this::makeTaskResponse);\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[{"MethodCalled":"completeTask"},{"MethodCalled":"getCurrentUser"}],"Parameters":["taskId","request"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskCommandController","MethodName":"completeTask","MethodSourceCode":"@RequestMapping(value = \"/tasks/{id}/complete\", method = PUT)\npublic CompletableFuture<TaskResponse> completeTask(@PathVariable(\"id\") String taskId, @RequestBody ChangeTaskStatusRequest request) {\n    return taskService.completeTask(taskId, request.getBoardId(), getCurrentUser()).thenApply(this::makeTaskResponse);\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[{"MethodCalled":"backlogTask"},{"MethodCalled":"getCurrentUser"}],"Parameters":["taskId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskCommandController","MethodName":"backlogTask","MethodSourceCode":"@RequestMapping(value = \"/tasks/{id}/backlog\", method = PUT)\npublic CompletableFuture<TaskResponse> backlogTask(@PathVariable(\"id\") String taskId) {\n    return taskService.backlogTask(taskId, getCurrentUser()).thenApply(this::makeTaskResponse);\n}","Folder":"task-command-side"},{"Variables":[{"VariableName":"res"}],"Methodscalled":[],"Parameters":["taskId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskCommandController","MethodName":"getHistory","MethodSourceCode":"@RequestMapping(value = \"/tasks/{id}/history\", method = GET)\npublic CompletableFuture<HistoryResponse> getHistory(@PathVariable(\"id\") String taskId) {\n    return taskHistoryService.getHistoryEvents(taskId).thenApply(ewm -> {\n        log.info(\"Getting Task History {}\", ewm.getEntity().getTask());\n        return new HistoryResponse(ewm.getEvents().stream().map(e -> {\n            HistoryEvent res = new HistoryEvent();\n            res.setId(ewm.getEntityIdAndVersion().getEntityId());\n            res.setEventType(e.getClass().getCanonicalName());\n            res.setEventData(e);\n            return res;\n        }).collect(Collectors.toList()));\n    });\n}","Folder":"task-command-side"},{"Variables":[{"VariableName":"auth"}],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskCommandController","MethodName":"getCurrentUser","MethodSourceCode":"private String getCurrentUser() {\n    Authentication auth = SecurityContextHolder.getContext().getAuthentication();\n    return auth.getName();\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":["e"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskCommandController","MethodName":"makeTaskResponse","MethodSourceCode":"private TaskResponse makeTaskResponse(EntityWithIdAndVersion<TaskAggregate> e) {\n    return new TaskResponse(e.getEntityId(), e.getAggregate().getTask().getBoardId(), e.getAggregate().getTask().getTaskDetails().getTitle(), e.getAggregate().getTask().getCreation().getWho(), e.getAggregate().getTask().getUpdate().getWho(), e.getAggregate().getTask().getCreation().getWhen(), e.getAggregate().getTask().getUpdate().getWhen(), e.getAggregate().getTask().getStatus(), e.getAggregate().getTask().isDeleted(), e.getAggregate().getTask().getTaskDetails().getDescription());\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":["eventStore"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskCommandSideConfiguration","MethodName":"taskAggregateRepository","MethodSourceCode":"@Bean\npublic AggregateRepository<TaskAggregate, TaskCommand> taskAggregateRepository(EventuateAggregateStore eventStore) {\n    return new AggregateRepository<>(TaskAggregate.class, eventStore);\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":["taskAggregateRepository"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskCommandSideConfiguration","MethodName":"taskService","MethodSourceCode":"@Bean\npublic TaskService taskService(AggregateRepository<TaskAggregate, TaskCommand> taskAggregateRepository) {\n    return new TaskService(taskAggregateRepository);\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":["eventStore"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskCommandSideConfiguration","MethodName":"taskHistoryService","MethodSourceCode":"@Bean\npublic TaskHistoryService taskHistoryService(EventuateAggregateStore eventStore) {\n    return new TaskHistoryService(eventStore);\n}","Folder":"task-command-side"},{"Variables":[{"VariableName":"additional"}],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskCommandSideConfiguration","MethodName":"customConverters","MethodSourceCode":"@Bean\npublic HttpMessageConverters customConverters() {\n    HttpMessageConverter<?> additional = new MappingJackson2HttpMessageConverter();\n    return new HttpMessageConverters(additional);\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":["taskId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskHistoryService","MethodName":"getHistoryEvents","MethodSourceCode":"public CompletableFuture<EntityWithMetadata<TaskAggregate>> getHistoryEvents(String taskId) {\n    return eventStore.find(TaskAggregate.class, taskId);\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[{"MethodCalled":"save"}],"Parameters":["task"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskService","MethodName":"save","MethodSourceCode":"public CompletableFuture<EntityWithIdAndVersion<TaskAggregate>> save(TaskInfo task) {\n    log.info(\"TaskService saving : {}\", task);\n    return aggregateRepository.save(new CreateTaskCommand(task));\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[{"MethodCalled":"update"}],"Parameters":["id","request","updatedBy"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskService","MethodName":"update","MethodSourceCode":"public CompletableFuture<EntityWithIdAndVersion<TaskAggregate>> update(String id, TaskDetails request, String updatedBy) {\n    log.info(\"TaskService updating {}: {}\", id, request);\n    return aggregateRepository.update(id, new UpdateTaskCommand(request, new AuditEntry(updatedBy, new Date())));\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[{"MethodCalled":"update"}],"Parameters":["id","updatedBy"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskService","MethodName":"remove","MethodSourceCode":"public CompletableFuture<EntityWithIdAndVersion<TaskAggregate>> remove(String id, String updatedBy) {\n    log.info(\"TaskService deleting : {}\", id);\n    return aggregateRepository.update(id, new DeleteTaskCommand(new AuditEntry(updatedBy, new Date())));\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[{"MethodCalled":"update"}],"Parameters":["id","boardId","updatedBy"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskService","MethodName":"startTask","MethodSourceCode":"public CompletableFuture<EntityWithIdAndVersion<TaskAggregate>> startTask(String id, String boardId, String updatedBy) {\n    log.info(\"TaskService starting task : {}\", id);\n    return aggregateRepository.update(id, new StartTaskCommand(boardId, new AuditEntry(updatedBy, new Date())));\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[{"MethodCalled":"update"}],"Parameters":["id","boardId","updatedBy"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskService","MethodName":"scheduleTask","MethodSourceCode":"public CompletableFuture<EntityWithIdAndVersion<TaskAggregate>> scheduleTask(String id, String boardId, String updatedBy) {\n    log.info(\"TaskService scheduling task : {}\", id);\n    return aggregateRepository.update(id, new ScheduleTaskCommand(boardId, new AuditEntry(updatedBy, new Date())));\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[{"MethodCalled":"update"}],"Parameters":["id","boardId","updatedBy"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskService","MethodName":"completeTask","MethodSourceCode":"public CompletableFuture<EntityWithIdAndVersion<TaskAggregate>> completeTask(String id, String boardId, String updatedBy) {\n    log.info(\"TaskService completing task : {}\", id);\n    return aggregateRepository.update(id, new CompleteTaskCommand(boardId, new AuditEntry(updatedBy, new Date())));\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[{"MethodCalled":"update"}],"Parameters":["id","updatedBy"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskService","MethodName":"backlogTask","MethodSourceCode":"public CompletableFuture<EntityWithIdAndVersion<TaskAggregate>> backlogTask(String id, String updatedBy) {\n    log.info(\"TaskService moving task to backlog : {}\", id);\n    return aggregateRepository.update(id, new MoveToBacklogTaskCommand(new AuditEntry(updatedBy, new Date())));\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"UpdateTaskCommand","MethodName":"getTaskDetails","MethodSourceCode":"public TaskDetails getTaskDetails() {\n    return taskDetails;\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"UpdateTaskCommand","MethodName":"getUpdate","MethodSourceCode":"public AuditEntry getUpdate() {\n    return update;\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"UpdateTaskCommand","MethodName":"toString","MethodSourceCode":"@Override\npublic String toString() {\n    return ToStringBuilder.reflectionToString(this);\n}","Folder":"task-command-side"},{"Variables":[],"Methodscalled":[],"Parameters":["args"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskCommandSideServiceMain","MethodName":"main","MethodSourceCode":"public static void main(String[] args) {\n    SpringApplication.run(TaskCommandSideServiceConfiguration.class, args);\n}","Folder":"task-command-side-service"},{"Variables":[{"VariableName":"resp"}],"Methodscalled":[],"Parameters":["boardId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskQueryController","MethodName":"listAllTasks","MethodSourceCode":"@RequestMapping(value = \"api/tasks\", method = GET)\npublic ResponseEntity<BacklogResponse> listAllTasks(@RequestParam(value = \"boardId\", required = false) String boardId) {\n    BacklogResponse resp = new BacklogResponse();\n    resp.setBacklog(Optional.of(taskRepository.findByStatus(TaskStatus.backlog)).orElse(new ArrayList<>()));\n    if (boardId != null && !boardId.isEmpty()) {\n        resp.setTasks(taskRepository.findByBoardIdAndStatusNot(boardId, TaskStatus.backlog));\n    } else {\n        resp.setTasks(new ArrayList<>());\n    }\n    return new ResponseEntity<>(resp, OK);\n}","Folder":"task-query-side"},{"Variables":[],"Methodscalled":[],"Parameters":["taskUpdateService"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskQuerySideConfiguration","MethodName":"taskQueryWorkflow","MethodSourceCode":"@Bean\npublic TaskQueryWorkflow taskQueryWorkflow(TaskUpdateService taskUpdateService) {\n    return new TaskQueryWorkflow(taskUpdateService);\n}","Folder":"task-query-side"},{"Variables":[],"Methodscalled":[],"Parameters":["taskRepository"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskQuerySideConfiguration","MethodName":"taskUpdateService","MethodSourceCode":"@Bean\npublic TaskUpdateService taskUpdateService(TaskRepository taskRepository) {\n    return new TaskUpdateService(taskRepository);\n}","Folder":"task-query-side"},{"Variables":[{"VariableName":"additional"}],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskQuerySideConfiguration","MethodName":"customConverters","MethodSourceCode":"@Bean\npublic HttpMessageConverters customConverters() {\n    HttpMessageConverter<?> additional = new MappingJackson2HttpMessageConverter();\n    return new HttpMessageConverters(additional);\n}","Folder":"task-query-side"},{"Variables":[{"VariableName":"dbRefResolver"},{"VariableName":"mappingConverter"}],"Methodscalled":[],"Parameters":["factory","context","beanFactory"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskQuerySideConfiguration","MethodName":"mappingMongoConverter","MethodSourceCode":"@Bean\npublic MappingMongoConverter mappingMongoConverter(MongoDbFactory factory, MongoMappingContext context, BeanFactory beanFactory) {\n    DbRefResolver dbRefResolver = new DefaultDbRefResolver(factory);\n    MappingMongoConverter mappingConverter = new MappingMongoConverter(dbRefResolver, context);\n    try {\n        mappingConverter.setCustomConversions(beanFactory.getBean(CustomConversions.class));\n    } catch (NoSuchBeanDefinitionException ignore) {\n    }\n    // Don't save _class to mongo\n    mappingConverter.setTypeMapper(new DefaultMongoTypeMapper(null));\n    return mappingConverter;\n}","Folder":"task-query-side"},{"Variables":[{"VariableName":"id"}],"Methodscalled":[{"MethodCalled":"create"}],"Parameters":["de"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskQueryWorkflow","MethodName":"create","MethodSourceCode":"@EventHandlerMethod\npublic void create(DispatchedEvent<TaskCreatedEvent> de) {\n    String id = de.getEntityId();\n    taskUpdateService.create(id, de.getEvent().getTaskInfo());\n}","Folder":"task-query-side"},{"Variables":[{"VariableName":"taskInfo"}],"Methodscalled":[{"MethodCalled":"update"}],"Parameters":["de"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskQueryWorkflow","MethodName":"update","MethodSourceCode":"@EventHandlerMethod\npublic void update(DispatchedEvent<TaskUpdatedEvent> de) {\n    log.info(\"TaskQueryWorkflow got event : {}\", de.getEvent());\n    TaskInfo taskInfo = new TaskInfo();\n    taskInfo.setTaskDetails(de.getEvent().getTaskDetails());\n    taskInfo.setUpdate(de.getEvent().getUpdate());\n    taskUpdateService.update(de.getEntityId(), taskInfo);\n}","Folder":"task-query-side"},{"Variables":[],"Methodscalled":[{"MethodCalled":"processChangeStatusEvent"}],"Parameters":["de"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskQueryWorkflow","MethodName":"complete","MethodSourceCode":"@EventHandlerMethod\npublic void complete(DispatchedEvent<TaskCompletedEvent> de) {\n    processChangeStatusEvent(de, TaskStatus.completed);\n}","Folder":"task-query-side"},{"Variables":[],"Methodscalled":[{"MethodCalled":"delete"}],"Parameters":["de"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskQueryWorkflow","MethodName":"delete","MethodSourceCode":"@EventHandlerMethod\npublic void delete(DispatchedEvent<TaskDeletedEvent> de) {\n    log.info(\"TaskQueryWorkflow got event : {}\", de.getEvent());\n    taskUpdateService.delete(de.getEntityId());\n}","Folder":"task-query-side"},{"Variables":[],"Methodscalled":[{"MethodCalled":"processChangeStatusEvent"}],"Parameters":["de"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskQueryWorkflow","MethodName":"schedule","MethodSourceCode":"@EventHandlerMethod\npublic void schedule(DispatchedEvent<TaskScheduledEvent> de) {\n    processChangeStatusEvent(de, TaskStatus.scheduled);\n}","Folder":"task-query-side"},{"Variables":[{"VariableName":"taskInfo"}],"Methodscalled":[{"MethodCalled":"updateAndSendEvent"}],"Parameters":["de"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskQueryWorkflow","MethodName":"backlog","MethodSourceCode":"@EventHandlerMethod\npublic void backlog(DispatchedEvent<TaskBacklogEvent> de) {\n    TaskInfo taskInfo = new TaskInfo();\n    taskInfo.setUpdate(de.getEvent().getUpdate());\n    taskInfo.setStatus(TaskStatus.backlog);\n    updateAndSendEvent(de, taskInfo);\n}","Folder":"task-query-side"},{"Variables":[],"Methodscalled":[{"MethodCalled":"processChangeStatusEvent"}],"Parameters":["de"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskQueryWorkflow","MethodName":"start","MethodSourceCode":"@EventHandlerMethod\npublic void start(DispatchedEvent<TaskStartedEvent> de) {\n    processChangeStatusEvent(de, TaskStatus.started);\n}","Folder":"task-query-side"},{"Variables":[{"VariableName":"taskInfo"}],"Methodscalled":[{"MethodCalled":"updateAndSendEvent"}],"Parameters":["de","taskStatus"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskQueryWorkflow","MethodName":"processChangeStatusEvent","MethodSourceCode":"private void processChangeStatusEvent(DispatchedEvent<? extends DetailedTaskEvent> de, TaskStatus taskStatus) {\n    TaskInfo taskInfo = new TaskInfo();\n    taskInfo.setBoardId(de.getEvent().getBoardId());\n    taskInfo.setUpdate(de.getEvent().getUpdate());\n    taskInfo.setStatus(taskStatus);\n    updateAndSendEvent((DispatchedEvent<? extends Event>) de, taskInfo);\n}","Folder":"task-query-side"},{"Variables":[],"Methodscalled":[{"MethodCalled":"update"}],"Parameters":["de","taskInfo"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskQueryWorkflow","MethodName":"updateAndSendEvent","MethodSourceCode":"private void updateAndSendEvent(DispatchedEvent<? extends Event> de, TaskInfo taskInfo) {\n    log.info(\"TaskQueryWorkflow got event : {}\", de.getEvent());\n    taskUpdateService.update(de.getEntityId(), taskInfo);\n}","Folder":"task-query-side"},{"Variables":[],"Methodscalled":[],"Parameters":["boardId","taskStatus"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskRepository","MethodName":"findByBoardIdAndStatusNot","MethodSourceCode":"List<Task> findByBoardIdAndStatusNot(String boardId, TaskStatus taskStatus);","Folder":"task-query-side"},{"Variables":[],"Methodscalled":[],"Parameters":["taskStatus"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskRepository","MethodName":"findByStatus","MethodSourceCode":"List<Task> findByStatus(TaskStatus taskStatus);","Folder":"task-query-side"},{"Variables":[{"VariableName":"taskToCreate"}],"Methodscalled":[],"Parameters":["id","taskInfo"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskUpdateService","MethodName":"create","MethodSourceCode":"public Task create(String id, TaskInfo taskInfo) {\n    Task taskToCreate = Task.transform(id, taskInfo);\n    return taskRepository.save(taskToCreate);\n}","Folder":"task-query-side"},{"Variables":[{"VariableName":"taskToDelete"}],"Methodscalled":[{"MethodCalled":"delete"}],"Parameters":["id"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskUpdateService","MethodName":"delete","MethodSourceCode":"public Task delete(String id) {\n    Task taskToDelete = taskRepository.findOne(id);\n    taskRepository.delete(taskToDelete);\n    return taskToDelete;\n}","Folder":"task-query-side"},{"Variables":[{"VariableName":"taskToUpdate"}],"Methodscalled":[],"Parameters":["id","taskInfo"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskUpdateService","MethodName":"update","MethodSourceCode":"public Task update(String id, TaskInfo taskInfo) {\n    Task taskToUpdate = taskRepository.findOne(id);\n    if (taskToUpdate == null) {\n        throw new NoSuchElementException(String.format(\"Task with id %s doesn't exist\", id));\n    }\n    if (taskInfo.getTaskDetails() != null) {\n        taskToUpdate.setTitle(taskInfo.getTaskDetails().getTitle());\n        taskToUpdate.setDescription(taskInfo.getTaskDetails().getDescription() != null ? taskInfo.getTaskDetails().getDescription().getDescription() : null);\n    }\n    if (taskInfo.getUpdate() != null) {\n        taskToUpdate.setUpdatedBy(taskInfo.getUpdate().getWho());\n        taskToUpdate.setUpdatedDate(taskInfo.getUpdate().getWhen());\n    }\n    if (taskInfo.getBoardId() != null) {\n        taskToUpdate.setBoardId(taskInfo.getBoardId());\n    }\n    if (taskInfo.getStatus() != null) {\n        taskToUpdate.setStatus(taskInfo.getStatus());\n    }\n    return taskRepository.save(taskToUpdate);\n}","Folder":"task-query-side"},{"Variables":[],"Methodscalled":[],"Parameters":["args"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TaskQuerySideServiceMain","MethodName":"main","MethodSourceCode":"public static void main(String[] args) {\n    SpringApplication.run(TaskQuerySideServiceConfiguration.class, args);\n}","Folder":"task-query-side-service"},{"Variables":[],"Methodscalled":[{"MethodCalled":"getHost"},{"MethodCalled":"getPort"}],"Parameters":["path"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AbstractAuthTest","MethodName":"baseUrl","MethodSourceCode":"private String baseUrl(String path) {\n    return \"http://\" + getHost() + \":\" + getPort() + \"/\" + path;\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[{"MethodCalled":"baseUrl"}],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AbstractAuthTest","MethodName":"shouldFailWithoutToken","MethodSourceCode":"@Test\npublic void shouldFailWithoutToken() throws IOException {\n    try {\n        Request.Get(baseUrl(\"/\")).execute();\n    } catch (HttpClientErrorException e) {\n        Assert.assertEquals(HttpStatus.FORBIDDEN, e.getStatusCode());\n    }\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"authRequest"},{"VariableName":"authResp"},{"VariableName":"content"},{"VariableName":"authResponse"}],"Methodscalled":[{"MethodCalled":"baseUrl"}],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AbstractAuthTest","MethodName":"shouldSuccessWithToken","MethodSourceCode":"@Test\npublic void shouldSuccessWithToken() throws IOException {\n    AuthRequest authRequest = new AuthRequest();\n    authRequest.setEmail(\"test@test.com\");\n    HttpResponse authResp = Request.Post(baseUrl(\"api/authenticate\")).bodyString(mapper.writeValueAsString(authRequest), ContentType.APPLICATION_JSON).execute().returnResponse();\n    Assert.assertEquals(HttpStatus.OK.value(), authResp.getStatusLine().getStatusCode());\n    String content = EntityUtils.toString(authResp.getEntity());\n    Assert.assertNotNull(content);\n    AuthResponse authResponse = mapper.readValue(content, AuthResponse.class);\n    Assert.assertFalse(authResponse.getToken().isEmpty());\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AbstractAuthTest","MethodName":"getPort","MethodSourceCode":"protected abstract int getPort();","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AbstractAuthTest","MethodName":"getHost","MethodSourceCode":"protected abstract String getHost();","Folder":"test-utils"},{"Variables":[{"VariableName":"boardInfo"},{"VariableName":"boardResponse"},{"VariableName":"savedBoardResponse"}],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AbstractRestApiTest","MethodName":"shouldGetBoardById","MethodSourceCode":"@Test\npublic void shouldGetBoardById() throws IOException, InterruptedException {\n    withToken(t -> {\n        BoardInfo boardInfo = generateBoardInfo();\n        BoardResponse boardResponse = createBoardAndWaitInView(t, boardInfo);\n        BoardQueryResponse savedBoardResponse = getBoard(t, boardResponse.getId());\n        assertBoardInfoEquals(boardInfo, transformToBoardInfo(savedBoardResponse.getData()));\n    });\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"boardInfo"},{"VariableName":"boardResponse"},{"VariableName":"boardsResponse"}],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AbstractRestApiTest","MethodName":"shouldGetAllBoards","MethodSourceCode":"@Test\npublic void shouldGetAllBoards() throws IOException, InterruptedException {\n    withToken(t -> {\n        BoardInfo boardInfo = generateBoardInfo();\n        BoardResponse boardResponse = createBoardAndWaitInView(t, boardInfo);\n        BoardsQueryResponse boardsResponse = getAllBoards(t);\n        assertBoardContains(transformToBoard(boardResponse.getId(), boardResponse), boardsResponse.getBoards());\n    });\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"taskInfo"},{"VariableName":"taskResponse"}],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AbstractRestApiTest","MethodName":"shouldGetBacklogTask","MethodSourceCode":"@Test\npublic void shouldGetBacklogTask() throws IOException, InterruptedException {\n    withToken(t -> {\n        TaskInfo taskInfo = generateTaskInfo();\n        TaskResponse taskResponse = createTaskAndWaitInView(t, taskInfo);\n        assertBackLogContains(t, taskResponse.getId(), taskResponse);\n    });\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"taskInfo"},{"VariableName":"taskResponse"},{"VariableName":"backlogResponse"}],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AbstractRestApiTest","MethodName":"shouldDeleteTask","MethodSourceCode":"@Test\npublic void shouldDeleteTask() throws IOException, InterruptedException {\n    withToken(t -> {\n        TaskInfo taskInfo = generateTaskInfo();\n        TaskResponse taskResponse = createTaskAndWaitInView(t, taskInfo);\n        deleteTaskAndWaitInView(t, taskResponse.getId());\n        BacklogResponse backlogResponse = getBacklogTasks(t);\n        assertTaskNotIn(transformToTask(taskResponse.getId(), taskResponse), backlogResponse.getBacklog());\n    });\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"taskInfo"},{"VariableName":"taskResponse"},{"VariableName":"taskDetails"},{"VariableName":"updatedTaskResponse"},{"VariableName":"backlogResponse"}],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AbstractRestApiTest","MethodName":"shouldUpdateTask","MethodSourceCode":"@Test\npublic void shouldUpdateTask() throws IOException, InterruptedException {\n    withToken(t -> {\n        TaskInfo taskInfo = generateTaskInfo();\n        TaskResponse taskResponse = createTaskAndWaitInView(t, taskInfo);\n        TaskDetails taskDetails = new TaskDetails(\"small task\", new TaskDescription(\"description\"));\n        TaskResponse updatedTaskResponse = updateTaskAndWaitInView(t, taskResponse.getId(), taskDetails);\n        BacklogResponse backlogResponse = getBacklogTasks(t);\n        assertTrue(taskListContains(transformToTask(taskResponse.getId(), updatedTaskResponse), backlogResponse.getBacklog()));\n    });\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"taskInfo"},{"VariableName":"taskResponse"},{"VariableName":"boardInfo"},{"VariableName":"boardResponse"},{"VariableName":"updatedTaskResponse"}],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AbstractRestApiTest","MethodName":"shouldStartTask","MethodSourceCode":"@Test\npublic void shouldStartTask() throws IOException, InterruptedException {\n    withToken(t -> {\n        TaskInfo taskInfo = generateTaskInfo();\n        TaskResponse taskResponse = createTaskAndWaitInView(t, taskInfo);\n        BoardInfo boardInfo = generateBoardInfo();\n        BoardResponse boardResponse = createBoardAndWaitInView(t, boardInfo);\n        TaskResponse updatedTaskResponse = startTaskAndWaitInView(t, boardResponse.getId(), taskResponse.getId());\n        assertTrue(taskListContains(transformToTask(taskResponse.getId(), updatedTaskResponse), getTasksForBoard(token, boardResponse.getId()).getTasks()));\n    });\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"taskInfo"},{"VariableName":"taskResponse"},{"VariableName":"boardInfo"},{"VariableName":"boardResponse"},{"VariableName":"updatedTaskResponse"}],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AbstractRestApiTest","MethodName":"shouldScheduleTask","MethodSourceCode":"@Test\npublic void shouldScheduleTask() throws IOException, InterruptedException {\n    withToken(t -> {\n        TaskInfo taskInfo = generateTaskInfo();\n        TaskResponse taskResponse = createTaskAndWaitInView(t, taskInfo);\n        BoardInfo boardInfo = generateBoardInfo();\n        BoardResponse boardResponse = createBoardAndWaitInView(t, boardInfo);\n        TaskResponse updatedTaskResponse = scheduleTaskAndWaitInView(t, boardResponse.getId(), taskResponse.getId());\n        assertTrue(taskListContains(transformToTask(taskResponse.getId(), updatedTaskResponse), getTasksForBoard(token, boardResponse.getId()).getTasks()));\n    });\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"taskInfo"},{"VariableName":"taskResponse"},{"VariableName":"boardInfo"},{"VariableName":"boardResponse"},{"VariableName":"updatedTaskResponse"}],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AbstractRestApiTest","MethodName":"shouldCompleteTask","MethodSourceCode":"@Test\npublic void shouldCompleteTask() throws IOException, InterruptedException {\n    withToken(t -> {\n        TaskInfo taskInfo = generateTaskInfo();\n        TaskResponse taskResponse = createTaskAndWaitInView(t, taskInfo);\n        BoardInfo boardInfo = generateBoardInfo();\n        BoardResponse boardResponse = createBoardAndWaitInView(t, boardInfo);\n        TaskResponse updatedTaskResponse = completeTaskAndWaitInView(t, boardResponse.getId(), taskResponse.getId());\n        assertTrue(taskListContains(transformToTask(taskResponse.getId(), updatedTaskResponse), getTasksForBoard(token, boardResponse.getId()).getTasks()));\n    });\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"taskInfo"},{"VariableName":"taskResponse"},{"VariableName":"boardInfo"},{"VariableName":"boardResponse"},{"VariableName":"historyResponse"}],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AbstractRestApiTest","MethodName":"shouldGetTaskHistory","MethodSourceCode":"@Test\npublic void shouldGetTaskHistory() throws IOException, InterruptedException {\n    withToken(t -> {\n        TaskInfo taskInfo = generateTaskInfo();\n        TaskResponse taskResponse = createTaskAndWaitInView(t, taskInfo);\n        BoardInfo boardInfo = generateBoardInfo();\n        BoardResponse boardResponse = createBoardAndWaitInView(t, boardInfo);\n        startTaskAndWaitInView(t, boardResponse.getId(), taskResponse.getId());\n        scheduleTaskAndWaitInView(t, boardResponse.getId(), taskResponse.getId());\n        completeTaskAndWaitInView(t, boardResponse.getId(), taskResponse.getId());\n        deleteTaskAndWaitInView(t, taskResponse.getId());\n        TestHistoryResponse historyResponse = getHistoryForTask(t, taskResponse.getId());\n        assertTaskHistoryContainsEvent(historyResponse.getData(), \"net.chrisrichardson.eventstore.examples.kanban.common.task.event.TaskCreatedEvent\");\n        assertTaskHistoryContainsEvent(historyResponse.getData(), \"net.chrisrichardson.eventstore.examples.kanban.common.task.event.TaskStartedEvent\");\n        assertTaskHistoryContainsEvent(historyResponse.getData(), \"net.chrisrichardson.eventstore.examples.kanban.common.task.event.TaskScheduledEvent\");\n        assertTaskHistoryContainsEvent(historyResponse.getData(), \"net.chrisrichardson.eventstore.examples.kanban.common.task.event.TaskCompletedEvent\");\n        assertTaskHistoryContainsEvent(historyResponse.getData(), \"net.chrisrichardson.eventstore.examples.kanban.common.task.event.TaskDeletedEvent\");\n    });\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"taskEventsListener"},{"VariableName":"boardInfo"},{"VariableName":"boardResponse"},{"VariableName":"wsEvent"},{"VariableName":"board"}],"Methodscalled":[{"MethodCalled":"parseStompEvent"}],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AbstractStompApiTest","MethodName":"shouldCreateBoards","MethodSourceCode":"@Test\npublic void shouldCreateBoards() throws IOException, InterruptedException {\n    withToken(t -> {\n        StompListener taskEventsListener = new StompListener(t, \"/events\", getHost(), getPort());\n        BoardInfo boardInfo = generateBoardInfo();\n        BoardResponse boardResponse = createBoardAndWaitInView(t, boardInfo);\n        assertBoardInfoEquals(boardInfo, transformToBoardInfo(boardResponse));\n        awaitPredicatePasses(idx -> taskEventsListener.getEvents(), (list) -> wsEventsContainsEvent(list, \"BoardCreatedEvent\"));\n        KanbanWebSocketEvent wsEvent = filterWSEvents(taskEventsListener.getEvents(), \"BoardCreatedEvent\");\n        Assert.assertNotNull(wsEvent.getEntityId());\n        Assert.assertEquals(BoardCreatedEvent.class.getName(), wsEvent.getEventType());\n        validateWSMessage(wsEvent.getEventType(), wsEvent.getEventData());\n        Board board = parseStompEvent(wsEvent, Board.class);\n        assertBoardInfoEquals(boardInfo, transformToBoardInfo(board));\n    });\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"taskEventsListener"},{"VariableName":"taskInfo"},{"VariableName":"taskResponse"},{"VariableName":"wsEvent"},{"VariableName":"task"}],"Methodscalled":[{"MethodCalled":"parseStompEvent"}],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AbstractStompApiTest","MethodName":"shouldCreateTasks","MethodSourceCode":"@Test\npublic void shouldCreateTasks() throws IOException, InterruptedException {\n    withToken(t -> {\n        StompListener taskEventsListener = new StompListener(t, \"/events\", getHost(), getPort());\n        TaskInfo taskInfo = generateTaskInfo();\n        TaskResponse taskResponse = createTaskAndWaitInView(t, taskInfo);\n        assertTaskInfoEquals(taskInfo, transformToTaskInfo(taskResponse));\n        awaitPredicatePasses(idx -> taskEventsListener.getEvents(), (list) -> wsEventsContainsEvent(list, \"TaskCreatedEvent\"));\n        KanbanWebSocketEvent wsEvent = filterWSEvents(taskEventsListener.getEvents(), \"TaskCreatedEvent\");\n        Assert.assertNotNull(wsEvent.getEntityId());\n        Assert.assertEquals(TaskCreatedEvent.class.getName(), wsEvent.getEventType());\n        validateWSMessage(wsEvent.getEventType(), wsEvent.getEventData());\n        Task task = parseStompEvent(wsEvent, Task.class);\n        assertTaskInfoEquals(taskInfo, transformToTaskInfo(task));\n    });\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"taskEventsListener"},{"VariableName":"taskInfo"},{"VariableName":"taskResponse"},{"VariableName":"taskDetails"},{"VariableName":"taskUpdatedResponse"},{"VariableName":"wsEvent"},{"VariableName":"task"}],"Methodscalled":[{"MethodCalled":"parseStompEvent"}],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AbstractStompApiTest","MethodName":"shouldUpdateTasks","MethodSourceCode":"@Test\npublic void shouldUpdateTasks() throws IOException, InterruptedException {\n    withToken(t -> {\n        StompListener taskEventsListener = new StompListener(t, \"/events\", getHost(), getPort());\n        TaskInfo taskInfo = generateTaskInfo();\n        TaskResponse taskResponse = createTaskAndWaitInView(t, taskInfo);\n        TaskDetails taskDetails = new TaskDetails(\"small task\", new TaskDescription(\"description\"));\n        TaskResponse taskUpdatedResponse = updateTaskAndWaitInView(t, taskResponse.getId(), taskDetails);\n        awaitPredicatePasses(idx -> taskEventsListener.getEvents(), (list) -> wsEventsContainsEvent(list, \"TaskUpdatedEvent\"));\n        KanbanWebSocketEvent wsEvent = filterWSEvents(taskEventsListener.getEvents(), \"TaskUpdatedEvent\");\n        Assert.assertNotNull(wsEvent.getEntityId());\n        Assert.assertEquals(TaskUpdatedEvent.class.getName(), wsEvent.getEventType());\n        validateWSMessage(wsEvent.getEventType(), wsEvent.getEventData());\n        Task task = parseStompEvent(wsEvent, Task.class);\n        Assert.assertEquals(taskUpdatedResponse.getDescription().getDescription(), task.getDescription());\n        Assert.assertEquals(taskUpdatedResponse.getUpdatedBy(), task.getUpdatedBy());\n        Assert.assertEquals(taskUpdatedResponse.getUpdatedDate(), task.getUpdatedDate());\n        Assert.assertEquals(taskUpdatedResponse.getTitle(), task.getTitle());\n    });\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"taskEventsListener"},{"VariableName":"boardInfo"},{"VariableName":"boardResponse"},{"VariableName":"taskInfo"},{"VariableName":"taskResponse"},{"VariableName":"taskChangedResponse"},{"VariableName":"wsEvent"},{"VariableName":"task"}],"Methodscalled":[{"MethodCalled":"parseStompEvent"}],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AbstractStompApiTest","MethodName":"shouldBacklogTasks","MethodSourceCode":"@Test\npublic void shouldBacklogTasks() throws IOException, InterruptedException {\n    withToken(t -> {\n        StompListener taskEventsListener = new StompListener(t, \"/events\", getHost(), getPort());\n        BoardInfo boardInfo = generateBoardInfo();\n        BoardResponse boardResponse = createBoardAndWaitInView(t, boardInfo);\n        TaskInfo taskInfo = generateTaskInfo();\n        TaskResponse taskResponse = createTaskAndWaitInView(t, taskInfo);\n        TaskResponse taskChangedResponse = changeTaskState(token, backlogTaskUrl(taskResponse.getId()), new ChangeTaskStatusRequest(boardResponse.getId()));\n        awaitPredicatePasses(idx -> taskEventsListener.getEvents(), (list) -> wsEventsContainsEvent(list, \"TaskBacklogEvent\"));\n        KanbanWebSocketEvent wsEvent = filterWSEvents(taskEventsListener.getEvents(), \"TaskBacklogEvent\");\n        Assert.assertNotNull(wsEvent.getEntityId());\n        Assert.assertEquals(TaskBacklogEvent.class.getName(), wsEvent.getEventType());\n        validateWSMessage(wsEvent.getEventType(), wsEvent.getEventData());\n        Task task = parseStompEvent(wsEvent, Task.class);\n        Assert.assertEquals(taskChangedResponse.getId(), task.getId());\n        Assert.assertEquals(taskChangedResponse.getUpdatedBy(), task.getUpdatedBy());\n        Assert.assertEquals(taskChangedResponse.getUpdatedDate(), task.getUpdatedDate());\n        Assert.assertEquals(\"\", task.getBoardId());\n        Assert.assertEquals(taskChangedResponse.getStatus(), task.getStatus());\n    });\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"taskEventsListener"},{"VariableName":"boardInfo"},{"VariableName":"boardResponse"},{"VariableName":"taskInfo"},{"VariableName":"taskResponse"},{"VariableName":"taskChangedResponse"},{"VariableName":"wsEvent"},{"VariableName":"task"}],"Methodscalled":[{"MethodCalled":"parseStompEvent"}],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AbstractStompApiTest","MethodName":"shouldCompleteTasks","MethodSourceCode":"@Test\npublic void shouldCompleteTasks() throws IOException, InterruptedException {\n    withToken(t -> {\n        StompListener taskEventsListener = new StompListener(t, \"/events\", getHost(), getPort());\n        BoardInfo boardInfo = generateBoardInfo();\n        BoardResponse boardResponse = createBoardAndWaitInView(t, boardInfo);\n        TaskInfo taskInfo = generateTaskInfo();\n        TaskResponse taskResponse = createTaskAndWaitInView(t, taskInfo);\n        TaskResponse taskChangedResponse = changeTaskState(token, completeTaskUrl(taskResponse.getId()), new ChangeTaskStatusRequest(boardResponse.getId()));\n        awaitPredicatePasses(idx -> taskEventsListener.getEvents(), (list) -> wsEventsContainsEvent(list, \"TaskCompletedEvent\"));\n        KanbanWebSocketEvent wsEvent = filterWSEvents(taskEventsListener.getEvents(), \"TaskCompletedEvent\");\n        Assert.assertNotNull(wsEvent.getEntityId());\n        Assert.assertEquals(TaskCompletedEvent.class.getName(), wsEvent.getEventType());\n        validateWSMessage(wsEvent.getEventType(), wsEvent.getEventData());\n        Task task = parseStompEvent(wsEvent, Task.class);\n        Assert.assertEquals(taskChangedResponse.getId(), task.getId());\n        Assert.assertEquals(taskChangedResponse.getUpdatedBy(), task.getUpdatedBy());\n        Assert.assertEquals(taskChangedResponse.getUpdatedDate(), task.getUpdatedDate());\n        Assert.assertEquals(taskChangedResponse.getBoardId(), task.getBoardId());\n        Assert.assertEquals(taskChangedResponse.getStatus(), task.getStatus());\n    });\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"taskEventsListener"},{"VariableName":"taskInfo"},{"VariableName":"taskResponse"},{"VariableName":"taskChangedResponse"},{"VariableName":"wsEvent"},{"VariableName":"task"}],"Methodscalled":[{"MethodCalled":"parseStompEvent"}],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AbstractStompApiTest","MethodName":"shouldDeleteTasks","MethodSourceCode":"@Test\npublic void shouldDeleteTasks() throws IOException, InterruptedException {\n    withToken(t -> {\n        StompListener taskEventsListener = new StompListener(t, \"/events\", getHost(), getPort());\n        TaskInfo taskInfo = generateTaskInfo();\n        TaskResponse taskResponse = createTaskAndWaitInView(t, taskInfo);\n        TaskResponse taskChangedResponse = deleteTaskAndWaitInView(token, taskResponse.getId());\n        awaitPredicatePasses(idx -> taskEventsListener.getEvents(), (list) -> wsEventsContainsEvent(list, \"TaskDeletedEvent\"));\n        KanbanWebSocketEvent wsEvent = filterWSEvents(taskEventsListener.getEvents(), \"TaskDeletedEvent\");\n        Assert.assertNotNull(wsEvent.getEntityId());\n        Assert.assertEquals(TaskDeletedEvent.class.getName(), wsEvent.getEventType());\n        validateWSMessage(wsEvent.getEventType(), wsEvent.getEventData());\n        Task task = parseStompEvent(wsEvent, Task.class);\n        Assert.assertEquals(taskChangedResponse.getId(), task.getId());\n        Assert.assertEquals(taskChangedResponse.getUpdatedBy(), task.getUpdatedBy());\n        Assert.assertEquals(taskChangedResponse.getUpdatedDate(), task.getUpdatedDate());\n        Assert.assertTrue(task.isDeleted());\n    });\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"taskEventsListener"},{"VariableName":"boardInfo"},{"VariableName":"boardResponse"},{"VariableName":"taskInfo"},{"VariableName":"taskResponse"},{"VariableName":"taskChangedResponse"},{"VariableName":"wsEvent"},{"VariableName":"task"}],"Methodscalled":[{"MethodCalled":"parseStompEvent"}],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AbstractStompApiTest","MethodName":"shouldScheduleTasks","MethodSourceCode":"@Test\npublic void shouldScheduleTasks() throws IOException, InterruptedException {\n    withToken(t -> {\n        StompListener taskEventsListener = new StompListener(t, \"/events\", getHost(), getPort());\n        BoardInfo boardInfo = generateBoardInfo();\n        BoardResponse boardResponse = createBoardAndWaitInView(t, boardInfo);\n        TaskInfo taskInfo = generateTaskInfo();\n        TaskResponse taskResponse = createTaskAndWaitInView(t, taskInfo);\n        TaskResponse taskChangedResponse = changeTaskState(token, scheduleTaskUrl(taskResponse.getId()), new ChangeTaskStatusRequest(boardResponse.getId()));\n        awaitPredicatePasses(idx -> taskEventsListener.getEvents(), (list) -> wsEventsContainsEvent(list, \"TaskScheduledEvent\"));\n        KanbanWebSocketEvent wsEvent = filterWSEvents(taskEventsListener.getEvents(), \"TaskScheduledEvent\");\n        Assert.assertNotNull(wsEvent.getEntityId());\n        Assert.assertEquals(TaskScheduledEvent.class.getName(), wsEvent.getEventType());\n        validateWSMessage(wsEvent.getEventType(), wsEvent.getEventData());\n        Task task = parseStompEvent(wsEvent, Task.class);\n        Assert.assertEquals(taskChangedResponse.getId(), task.getId());\n        Assert.assertEquals(taskChangedResponse.getUpdatedBy(), task.getUpdatedBy());\n        Assert.assertEquals(taskChangedResponse.getUpdatedDate(), task.getUpdatedDate());\n        Assert.assertEquals(taskChangedResponse.getBoardId(), task.getBoardId());\n        Assert.assertEquals(taskChangedResponse.getStatus(), task.getStatus());\n    });\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"taskEventsListener"},{"VariableName":"boardInfo"},{"VariableName":"boardResponse"},{"VariableName":"taskInfo"},{"VariableName":"taskResponse"},{"VariableName":"taskChangedResponse"},{"VariableName":"wsEvent"},{"VariableName":"task"}],"Methodscalled":[{"MethodCalled":"parseStompEvent"}],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AbstractStompApiTest","MethodName":"shouldStartTasks","MethodSourceCode":"@Test\npublic void shouldStartTasks() throws IOException, InterruptedException {\n    withToken(t -> {\n        StompListener taskEventsListener = new StompListener(t, \"/events\", getHost(), getPort());\n        BoardInfo boardInfo = generateBoardInfo();\n        BoardResponse boardResponse = createBoardAndWaitInView(t, boardInfo);\n        TaskInfo taskInfo = generateTaskInfo();\n        TaskResponse taskResponse = createTaskAndWaitInView(t, taskInfo);\n        TaskResponse taskChangedResponse = changeTaskState(token, startTaskUrl(taskResponse.getId()), new ChangeTaskStatusRequest(boardResponse.getId()));\n        awaitPredicatePasses(idx -> taskEventsListener.getEvents(), (list) -> wsEventsContainsEvent(list, \"TaskStartedEvent\"));\n        KanbanWebSocketEvent wsEvent = filterWSEvents(taskEventsListener.getEvents(), \"TaskStartedEvent\");\n        Assert.assertNotNull(wsEvent.getEntityId());\n        Assert.assertEquals(TaskStartedEvent.class.getName(), wsEvent.getEventType());\n        validateWSMessage(wsEvent.getEventType(), wsEvent.getEventData());\n        Task task = parseStompEvent(wsEvent, Task.class);\n        Assert.assertEquals(taskChangedResponse.getId(), task.getId());\n        Assert.assertEquals(taskChangedResponse.getUpdatedBy(), task.getUpdatedBy());\n        Assert.assertEquals(taskChangedResponse.getUpdatedDate(), task.getUpdatedDate());\n        Assert.assertEquals(taskChangedResponse.getBoardId(), task.getBoardId());\n        Assert.assertEquals(taskChangedResponse.getStatus(), task.getStatus());\n    });\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["stompEvent","clazz"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"AbstractStompApiTest","MethodName":"parseStompEvent","MethodSourceCode":"private <T> T parseStompEvent(KanbanWebSocketEvent stompEvent, Class<T> clazz) {\n    try {\n        return mapper.readValue(stompEvent.getEventData(), clazz);\n    } catch (IOException e) {\n        throw new RuntimeException(e);\n    }\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[{"MethodCalled":"getHost"},{"MethodCalled":"getPort"}],"Parameters":["path"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"baseUrl","MethodSourceCode":"protected String baseUrl(String path) {\n    return \"http://\" + getHost() + \":\" + getPort() + \"/\" + path;\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[{"MethodCalled":"baseUrl"}],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"boardsUrl","MethodSourceCode":"protected String boardsUrl() {\n    return baseUrl(\"api/boards\");\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[{"MethodCalled":"baseUrl"}],"Parameters":["id"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"boardUrl","MethodSourceCode":"protected String boardUrl(String id) {\n    return baseUrl(\"api/boards/\" + id);\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[{"MethodCalled":"baseUrl"}],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"tasksUrl","MethodSourceCode":"protected String tasksUrl() {\n    return baseUrl(\"api/tasks\");\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[{"MethodCalled":"baseUrl"}],"Parameters":["boardId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"tasksUrl","MethodSourceCode":"protected String tasksUrl(String boardId) {\n    return baseUrl(\"api/tasks?boardId=\" + boardId);\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[{"MethodCalled":"baseUrl"}],"Parameters":["taskId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"taskUrl","MethodSourceCode":"protected String taskUrl(String taskId) {\n    return baseUrl(\"api/tasks/\" + taskId);\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[{"MethodCalled":"baseUrl"}],"Parameters":["taskId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"taskHistoryUrl","MethodSourceCode":"protected String taskHistoryUrl(String taskId) {\n    return baseUrl(\"api/tasks/\" + taskId + \"/history\");\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[{"MethodCalled":"baseUrl"}],"Parameters":["taskId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"startTaskUrl","MethodSourceCode":"protected String startTaskUrl(String taskId) {\n    return baseUrl(\"api/tasks/\" + taskId + \"/start\");\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[{"MethodCalled":"baseUrl"}],"Parameters":["taskId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"scheduleTaskUrl","MethodSourceCode":"protected String scheduleTaskUrl(String taskId) {\n    return baseUrl(\"api/tasks/\" + taskId + \"/schedule\");\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[{"MethodCalled":"baseUrl"}],"Parameters":["taskId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"completeTaskUrl","MethodSourceCode":"protected String completeTaskUrl(String taskId) {\n    return baseUrl(\"api/tasks/\" + taskId + \"/complete\");\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[{"MethodCalled":"baseUrl"}],"Parameters":["taskId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"backlogTaskUrl","MethodSourceCode":"protected String backlogTaskUrl(String taskId) {\n    return baseUrl(\"api/tasks/\" + taskId + \"/backlog\");\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["typeName"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"getWSJsonSchemaPath","MethodSourceCode":"protected String getWSJsonSchemaPath(String typeName) {\n    return \"classpath:schemas/websocket-events-schema/\" + typeName + \".json\";\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"authRequest"},{"VariableName":"authHttpResp"},{"VariableName":"content"},{"VariableName":"authResponse"}],"Methodscalled":[{"MethodCalled":"baseUrl"}],"Parameters":["func"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"withToken","MethodSourceCode":"public void withToken(Consumer<String> func) throws IOException {\n    if (token == null) {\n        AuthRequest authRequest = new AuthRequest();\n        authRequest.setEmail(\"test@test.com\");\n        HttpResponse authHttpResp = Request.Post(baseUrl(\"api/authenticate\")).bodyString(mapper.writeValueAsString(authRequest), ContentType.APPLICATION_JSON).execute().returnResponse();\n        Assert.assertEquals(HttpStatus.OK.value(), authHttpResp.getStatusLine().getStatusCode());\n        String content = EntityUtils.toString(authHttpResp.getEntity());\n        assertNotNull(content);\n        AuthResponse authResponse = mapper.readValue(content, AuthResponse.class);\n        Assert.assertFalse(authResponse.getToken().isEmpty());\n        token = authResponse.getToken();\n    }\n    func.accept(token);\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[{"MethodCalled":"getBacklogTasks"},{"MethodCalled":"taskListContainsTaskWithId"}],"Parameters":["token","taskId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"awaitTaskCreationInView","MethodSourceCode":"protected void awaitTaskCreationInView(String token, String taskId) {\n    awaitPredicatePasses(idx -> getBacklogTasks(token), (bqr) -> taskListContainsTaskWithId(taskId, bqr.getBacklog()));\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[{"MethodCalled":"getBacklogTasks"},{"MethodCalled":"taskListContainsTaskWithId"}],"Parameters":["token","taskId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"awaitTaskDeletionInView","MethodSourceCode":"protected void awaitTaskDeletionInView(String token, String taskId) {\n    awaitPredicatePasses(idx -> getBacklogTasks(token), (bqr) -> !taskListContainsTaskWithId(taskId, bqr.getBacklog()));\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["board"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"transformToBoardInfo","MethodSourceCode":"protected BoardInfo transformToBoardInfo(Board board) {\n    return new BoardInfo(board.getTitle(), new AuditEntry(board.getCreatedBy(), board.getCreatedDate()), new AuditEntry(board.getUpdatedBy(), board.getUpdatedDate()));\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["boardResponse"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"transformToBoardInfo","MethodSourceCode":"protected BoardInfo transformToBoardInfo(BoardResponse boardResponse) {\n    return new BoardInfo(boardResponse.getTitle(), new AuditEntry(boardResponse.getCreatedBy(), boardResponse.getCreatedDate()), new AuditEntry(boardResponse.getUpdatedBy(), boardResponse.getUpdatedDate()));\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["id","boardResponse"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"transformToBoard","MethodSourceCode":"protected Board transformToBoard(String id, BoardResponse boardResponse) {\n    return new Board(id, boardResponse.getTitle(), boardResponse.getCreatedBy(), boardResponse.getCreatedDate(), boardResponse.getUpdatedDate(), boardResponse.getUpdatedBy());\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["id","taskResponse"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"transformToTask","MethodSourceCode":"protected Task transformToTask(String id, TaskResponse taskResponse) {\n    return new Task(id, taskResponse.getBoardId(), taskResponse.getTitle(), taskResponse.getCreatedBy(), taskResponse.getUpdatedBy(), taskResponse.getCreatedDate(), taskResponse.getUpdatedDate(), taskResponse.getStatus(), taskResponse.isDeleted(), taskResponse.getDescription() != null ? taskResponse.getDescription().getDescription() : null);\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["taskResponse"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"transformToTaskInfo","MethodSourceCode":"protected TaskInfo transformToTaskInfo(TaskResponse taskResponse) {\n    return new TaskInfo(taskResponse.getBoardId(), new TaskDetails(taskResponse.getTitle(), taskResponse.getDescription()), new AuditEntry(taskResponse.getCreatedBy(), taskResponse.getCreatedDate()), new AuditEntry(taskResponse.getUpdatedBy(), taskResponse.getUpdatedDate()), taskResponse.getStatus(), taskResponse.isDeleted());\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["task"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"transformToTaskInfo","MethodSourceCode":"protected TaskInfo transformToTaskInfo(Task task) {\n    return new TaskInfo(task.getBoardId(), new TaskDetails(task.getTitle(), new TaskDescription(task.getDescription())), new AuditEntry(task.getCreatedBy(), task.getCreatedDate()), new AuditEntry(task.getUpdatedBy(), task.getUpdatedDate()), task.getStatus(), task.isDeleted());\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"generateTaskInfo","MethodSourceCode":"protected TaskInfo generateTaskInfo() {\n    return new TaskInfo(\"1\", new TaskDetails(\"big task\", new TaskDescription(\"data\")), new AuditEntry(\"doctor@who.me\", new Date()), new AuditEntry(\"doctor@who.me\", new Date()), TaskStatus.backlog, false);\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"generateBoardInfo","MethodSourceCode":"protected BoardInfo generateBoardInfo() {\n    return new BoardInfo(\"big project\", new AuditEntry(\"doctor@who.me\", new Date()), new AuditEntry(\"doctor@who.me\", new Date()));\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"eventName"},{"VariableName":"schemaFileResource"},{"VariableName":"jsonSchema"}],"Methodscalled":[{"MethodCalled":"getApplicationContext"},{"MethodCalled":"getWSJsonSchemaPath"}],"Parameters":["eventType","jsonText"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"validateWSMessage","MethodSourceCode":"protected void validateWSMessage(String eventType, String jsonText) {\n    String eventName = StringUtils.substringAfterLast(eventType, \".\");\n    assertNotNull(eventName);\n    try {\n        Resource schemaFileResource = getApplicationContext().getResource(getWSJsonSchemaPath(eventName));\n        String jsonSchema = new BufferedReader(new InputStreamReader(schemaFileResource.getInputStream())).lines().collect(Collectors.joining(\"\\n\"));\n        assertTrue(ValidationUtils.isJsonValid(ValidationUtils.getSchemaNode(jsonSchema), ValidationUtils.getJsonNode(jsonText)));\n    } catch (Exception e) {\n        throw new RuntimeException(e);\n    }\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"eventOptional"}],"Methodscalled":[],"Parameters":["webSocketEvents","eventType"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"filterWSEvents","MethodSourceCode":"protected KanbanWebSocketEvent filterWSEvents(List<KanbanWebSocketEvent> webSocketEvents, String eventType) {\n    Optional<KanbanWebSocketEvent> eventOptional = webSocketEvents.stream().filter(kwse -> kwse.getEventType().contains(eventType)).findFirst();\n    assertTrue(eventOptional.isPresent());\n    return eventOptional.get();\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["webSocketEvents","eventType"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"wsEventsContainsEvent","MethodSourceCode":"protected boolean wsEventsContainsEvent(List<KanbanWebSocketEvent> webSocketEvents, String eventType) {\n    return webSocketEvents.stream().anyMatch(kwse -> kwse.getEventType().contains(eventType));\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["taskId","tasks"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"taskListContainsTaskWithId","MethodSourceCode":"protected boolean taskListContainsTaskWithId(String taskId, List<Task> tasks) {\n    return tasks.stream().anyMatch(task -> task.getId().equals(taskId));\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["expectedTask","tasks"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"taskListContains","MethodSourceCode":"protected boolean taskListContains(Task expectedTask, List<Task> tasks) {\n    return tasks.contains(expectedTask);\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"backlogResponse"}],"Methodscalled":[{"MethodCalled":"getBacklogTasks"},{"MethodCalled":"taskListContains"},{"MethodCalled":"transformToTask"}],"Parameters":["token","taskId","taskResponse"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"assertBackLogContains","MethodSourceCode":"protected void assertBackLogContains(String token, String taskId, TaskResponse taskResponse) {\n    BacklogResponse backlogResponse = getBacklogTasks(token);\n    assertTrue(taskListContains(transformToTask(taskId, taskResponse), backlogResponse.getBacklog()));\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["expectedTask","tasks"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"assertTaskNotIn","MethodSourceCode":"protected void assertTaskNotIn(Task expectedTask, List<Task> tasks) {\n    Assert.assertFalse(tasks.contains(expectedTask));\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["expectedBoard","boards"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"assertBoardContains","MethodSourceCode":"protected void assertBoardContains(Board expectedBoard, List<Board> boards) {\n    assertTrue(boards.contains(expectedBoard));\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["expectedTaskInfo","taskInfo"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"assertTaskInfoEquals","MethodSourceCode":"protected void assertTaskInfoEquals(TaskInfo expectedTaskInfo, TaskInfo taskInfo) {\n    Assert.assertEquals(expectedTaskInfo.getTaskDetails(), taskInfo.getTaskDetails());\n    Assert.assertEquals(expectedTaskInfo.getCreation(), taskInfo.getCreation());\n    Assert.assertEquals(expectedTaskInfo.getUpdate(), taskInfo.getUpdate());\n    Assert.assertEquals(expectedTaskInfo.getStatus(), taskInfo.getStatus());\n    Assert.assertEquals(expectedTaskInfo.isDeleted(), taskInfo.isDeleted());\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["expectedBoardInfo","boardInfo"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"assertBoardInfoEquals","MethodSourceCode":"protected void assertBoardInfoEquals(BoardInfo expectedBoardInfo, BoardInfo boardInfo) {\n    Assert.assertEquals(expectedBoardInfo.getTitle(), boardInfo.getTitle());\n    Assert.assertEquals(expectedBoardInfo.getCreation(), boardInfo.getCreation());\n    Assert.assertEquals(expectedBoardInfo.getUpdate(), boardInfo.getUpdate());\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["historyEvents","eventName"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"assertTaskHistoryContainsEvent","MethodSourceCode":"protected void assertTaskHistoryContainsEvent(List<TestHistoryEvent> historyEvents, String eventName) {\n    assertTrue(historyEvents.stream().filter(he -> he.getEventType().equals(eventName)).findFirst().isPresent());\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"httpResp"},{"VariableName":"responseContent"}],"Methodscalled":[{"MethodCalled":"boardUrl"}],"Parameters":["token","boardId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"getBoard","MethodSourceCode":"protected BoardQueryResponse getBoard(String token, String boardId) {\n    try {\n        HttpResponse httpResp = Request.Get(boardUrl(boardId)).addHeader(\"x-access-token\", token).execute().returnResponse();\n        Assert.assertEquals(HttpStatus.OK.value(), httpResp.getStatusLine().getStatusCode());\n        String responseContent = EntityUtils.toString(httpResp.getEntity());\n        Assert.assertFalse(responseContent.isEmpty());\n        return mapper.readValue(responseContent, BoardQueryResponse.class);\n    } catch (IOException e) {\n        throw new RuntimeException(e);\n    }\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"httpResp"},{"VariableName":"responseContent"}],"Methodscalled":[{"MethodCalled":"boardsUrl"}],"Parameters":["token"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"getAllBoards","MethodSourceCode":"protected BoardsQueryResponse getAllBoards(String token) {\n    try {\n        HttpResponse httpResp = Request.Get(boardsUrl()).addHeader(\"x-access-token\", token).execute().returnResponse();\n        Assert.assertEquals(HttpStatus.OK.value(), httpResp.getStatusLine().getStatusCode());\n        String responseContent = EntityUtils.toString(httpResp.getEntity());\n        Assert.assertFalse(responseContent.isEmpty());\n        return mapper.readValue(responseContent, BoardsQueryResponse.class);\n    } catch (IOException e) {\n        throw new RuntimeException(e);\n    }\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"httpResp"},{"VariableName":"responseContent"}],"Methodscalled":[{"MethodCalled":"tasksUrl"}],"Parameters":["token"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"getBacklogTasks","MethodSourceCode":"protected BacklogResponse getBacklogTasks(String token) {\n    try {\n        HttpResponse httpResp = Request.Get(tasksUrl()).addHeader(\"x-access-token\", token).execute().returnResponse();\n        Assert.assertEquals(HttpStatus.OK.value(), httpResp.getStatusLine().getStatusCode());\n        String responseContent = EntityUtils.toString(httpResp.getEntity());\n        Assert.assertFalse(responseContent.isEmpty());\n        return mapper.readValue(responseContent, BacklogResponse.class);\n    } catch (IOException e) {\n        throw new RuntimeException(e);\n    }\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"httpResp"},{"VariableName":"responseContent"}],"Methodscalled":[{"MethodCalled":"tasksUrl"}],"Parameters":["token","boardId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"getTasksForBoard","MethodSourceCode":"protected BacklogResponse getTasksForBoard(String token, String boardId) {\n    try {\n        HttpResponse httpResp = Request.Get(tasksUrl(boardId)).addHeader(\"x-access-token\", token).execute().returnResponse();\n        Assert.assertEquals(HttpStatus.OK.value(), httpResp.getStatusLine().getStatusCode());\n        String responseContent = EntityUtils.toString(httpResp.getEntity());\n        Assert.assertFalse(responseContent.isEmpty());\n        return mapper.readValue(responseContent, BacklogResponse.class);\n    } catch (IOException e) {\n        throw new RuntimeException(e);\n    }\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"httpResp"},{"VariableName":"responseContent"}],"Methodscalled":[{"MethodCalled":"taskHistoryUrl"}],"Parameters":["token","taskId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"getHistoryForTask","MethodSourceCode":"protected TestHistoryResponse getHistoryForTask(String token, String taskId) {\n    try {\n        HttpResponse httpResp = Request.Get(taskHistoryUrl(taskId)).addHeader(\"x-access-token\", token).execute().returnResponse();\n        Assert.assertEquals(HttpStatus.OK.value(), httpResp.getStatusLine().getStatusCode());\n        String responseContent = EntityUtils.toString(httpResp.getEntity());\n        Assert.assertFalse(responseContent.isEmpty());\n        return mapper.readValue(responseContent, TestHistoryResponse.class);\n    } catch (IOException e) {\n        throw new RuntimeException(e);\n    }\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"httpResp"},{"VariableName":"responseContent"},{"VariableName":"resp"}],"Methodscalled":[{"MethodCalled":"tasksUrl"},{"MethodCalled":"awaitTaskCreationInView"}],"Parameters":["token","taskInfo"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"createTaskAndWaitInView","MethodSourceCode":"protected TaskResponse createTaskAndWaitInView(String token, TaskInfo taskInfo) {\n    try {\n        HttpResponse httpResp = Request.Post(tasksUrl()).addHeader(\"x-access-token\", token).bodyString(mapper.writeValueAsString(taskInfo), ContentType.APPLICATION_JSON).execute().returnResponse();\n        Assert.assertEquals(HttpStatus.OK.value(), httpResp.getStatusLine().getStatusCode());\n        String responseContent = EntityUtils.toString(httpResp.getEntity());\n        Assert.assertFalse(responseContent.isEmpty());\n        TaskResponse resp = mapper.readValue(responseContent, TaskResponse.class);\n        awaitTaskCreationInView(token, resp.getId());\n        return resp;\n    } catch (IOException e) {\n        throw new RuntimeException(e);\n    }\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"httpResp"},{"VariableName":"responseContent"},{"VariableName":"resp"}],"Methodscalled":[{"MethodCalled":"taskUrl"},{"MethodCalled":"awaitTaskDeletionInView"}],"Parameters":["token","taskId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"deleteTaskAndWaitInView","MethodSourceCode":"protected TaskResponse deleteTaskAndWaitInView(String token, String taskId) {\n    try {\n        HttpResponse httpResp = Request.Delete(taskUrl(taskId)).addHeader(\"x-access-token\", token).execute().returnResponse();\n        Assert.assertEquals(HttpStatus.OK.value(), httpResp.getStatusLine().getStatusCode());\n        String responseContent = EntityUtils.toString(httpResp.getEntity());\n        Assert.assertFalse(responseContent.isEmpty());\n        TaskResponse resp = mapper.readValue(responseContent, TaskResponse.class);\n        awaitTaskDeletionInView(token, resp.getId());\n        return resp;\n    } catch (IOException e) {\n        throw new RuntimeException(e);\n    }\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"httpResp"},{"VariableName":"responseContent"},{"VariableName":"resp"}],"Methodscalled":[{"MethodCalled":"taskUrl"},{"MethodCalled":"awaitTaskCreationInView"}],"Parameters":["token","taskId","request"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"updateTaskAndWaitInView","MethodSourceCode":"protected TaskResponse updateTaskAndWaitInView(String token, String taskId, TaskDetails request) {\n    try {\n        HttpResponse httpResp = Request.Put(taskUrl(taskId)).addHeader(\"x-access-token\", token).bodyString(mapper.writeValueAsString(request), ContentType.APPLICATION_JSON).execute().returnResponse();\n        Assert.assertEquals(HttpStatus.OK.value(), httpResp.getStatusLine().getStatusCode());\n        String responseContent = EntityUtils.toString(httpResp.getEntity());\n        Assert.assertFalse(responseContent.isEmpty());\n        TaskResponse resp = mapper.readValue(responseContent, TaskResponse.class);\n        awaitTaskCreationInView(token, resp.getId());\n        return mapper.readValue(responseContent, TaskResponse.class);\n    } catch (IOException e) {\n        throw new RuntimeException(e);\n    }\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"httpResp"},{"VariableName":"responseContent"}],"Methodscalled":[],"Parameters":["token","url","request"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"changeTaskState","MethodSourceCode":"protected TaskResponse changeTaskState(String token, String url, ChangeTaskStatusRequest request) {\n    try {\n        HttpResponse httpResp = Request.Put(url).addHeader(\"x-access-token\", token).bodyString(mapper.writeValueAsString(request), ContentType.APPLICATION_JSON).execute().returnResponse();\n        Assert.assertEquals(HttpStatus.OK.value(), httpResp.getStatusLine().getStatusCode());\n        String responseContent = EntityUtils.toString(httpResp.getEntity());\n        Assert.assertFalse(responseContent.isEmpty());\n        return mapper.readValue(responseContent, TaskResponse.class);\n    } catch (IOException e) {\n        throw new RuntimeException(e);\n    }\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"updatedTaskResponse"}],"Methodscalled":[{"MethodCalled":"changeTaskState"},{"MethodCalled":"startTaskUrl"},{"MethodCalled":"getTasksForBoard"},{"MethodCalled":"taskListContains"},{"MethodCalled":"transformToTask"}],"Parameters":["token","boardId","taskId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"startTaskAndWaitInView","MethodSourceCode":"protected TaskResponse startTaskAndWaitInView(String token, String boardId, String taskId) {\n    TaskResponse updatedTaskResponse = changeTaskState(token, startTaskUrl(taskId), new ChangeTaskStatusRequest(boardId));\n    awaitPredicatePasses(idx -> getTasksForBoard(token, boardId), (bqr) -> taskListContains(transformToTask(taskId, updatedTaskResponse), bqr.getTasks()));\n    return updatedTaskResponse;\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"updatedTaskResponse"}],"Methodscalled":[{"MethodCalled":"changeTaskState"},{"MethodCalled":"scheduleTaskUrl"},{"MethodCalled":"getTasksForBoard"},{"MethodCalled":"taskListContains"},{"MethodCalled":"transformToTask"}],"Parameters":["token","boardId","taskId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"scheduleTaskAndWaitInView","MethodSourceCode":"protected TaskResponse scheduleTaskAndWaitInView(String token, String boardId, String taskId) {\n    TaskResponse updatedTaskResponse = changeTaskState(token, scheduleTaskUrl(taskId), new ChangeTaskStatusRequest(boardId));\n    awaitPredicatePasses(idx -> getTasksForBoard(token, boardId), (bqr) -> taskListContains(transformToTask(taskId, updatedTaskResponse), bqr.getTasks()));\n    return updatedTaskResponse;\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"updatedTaskResponse"}],"Methodscalled":[{"MethodCalled":"changeTaskState"},{"MethodCalled":"completeTaskUrl"},{"MethodCalled":"getTasksForBoard"},{"MethodCalled":"taskListContains"},{"MethodCalled":"transformToTask"}],"Parameters":["token","boardId","taskId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"completeTaskAndWaitInView","MethodSourceCode":"protected TaskResponse completeTaskAndWaitInView(String token, String boardId, String taskId) {\n    TaskResponse updatedTaskResponse = changeTaskState(token, completeTaskUrl(taskId), new ChangeTaskStatusRequest(boardId));\n    awaitPredicatePasses(idx -> getTasksForBoard(token, boardId), (bqr) -> taskListContains(transformToTask(taskId, updatedTaskResponse), bqr.getTasks()));\n    return updatedTaskResponse;\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"httpResp"},{"VariableName":"responseContent"},{"VariableName":"resp"}],"Methodscalled":[{"MethodCalled":"boardsUrl"},{"MethodCalled":"awaitBoardCreationInView"}],"Parameters":["token","boardInfo"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"createBoardAndWaitInView","MethodSourceCode":"protected BoardResponse createBoardAndWaitInView(String token, BoardInfo boardInfo) {\n    try {\n        HttpResponse httpResp = Request.Post(boardsUrl()).addHeader(\"x-access-token\", token).bodyString(mapper.writeValueAsString(boardInfo), ContentType.APPLICATION_JSON).execute().returnResponse();\n        Assert.assertEquals(HttpStatus.OK.value(), httpResp.getStatusLine().getStatusCode());\n        String responseContent = EntityUtils.toString(httpResp.getEntity());\n        Assert.assertFalse(responseContent.isEmpty());\n        BoardResponse resp = mapper.readValue(responseContent, BoardResponse.class);\n        awaitBoardCreationInView(token, resp.getId());\n        return resp;\n    } catch (IOException e) {\n        throw new RuntimeException(e);\n    }\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[{"MethodCalled":"boardUrl"}],"Parameters":["token","boardId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"awaitBoardCreationInView","MethodSourceCode":"protected void awaitBoardCreationInView(String token, String boardId) throws IOException {\n    awaitSuccessfulRequest(() -> {\n        try {\n            return Request.Get(boardUrl(boardId)).addHeader(\"x-access-token\", token).execute().returnResponse();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    });\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"getPort","MethodSourceCode":"protected abstract int getPort();","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"getHost","MethodSourceCode":"protected abstract String getHost();","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BaseTest","MethodName":"getApplicationContext","MethodSourceCode":"protected abstract ApplicationContext getApplicationContext();","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["template"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BasicWebTestConfiguration","MethodName":"websocketEventsTranslator","MethodSourceCode":"@Bean\npublic WebsocketEventsTranslator websocketEventsTranslator(SimpMessagingTemplate template) {\n    return new WebsocketEventsTranslator(template);\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"converter"},{"VariableName":"httpClient"},{"VariableName":"restTemplate"}],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"BasicWebTestConfiguration","MethodName":"restTemplate","MethodSourceCode":"@Bean\npublic RestTemplate restTemplate() {\n    // we have to define Apache HTTP client to use the PATCH verb\n    MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();\n    converter.setSupportedMediaTypes(MediaType.parseMediaTypes(\"application/json\"));\n    converter.setObjectMapper(new ObjectMapper());\n    HttpClient httpClient = HttpClients.createDefault();\n    RestTemplate restTemplate = new RestTemplate(Collections.<HttpMessageConverter<?>>singletonList(converter));\n    restTemplate.setRequestFactory(new HttpComponentsClientHttpRequestFactory(httpClient));\n    return restTemplate;\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["stompSession","headers"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ConsumerStompMessageHandler","MethodName":"afterConnected","MethodSourceCode":"@Override\npublic void afterConnected(StompSession stompSession, StompHeaderAccessor headers) {\n    this.connectLatch.countDown();\n    this.stompSession = stompSession;\n    stompSession.subscribe(\"/topic/greeting\", \"receipt1\");\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["receiptId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ConsumerStompMessageHandler","MethodName":"handleReceipt","MethodSourceCode":"@Override\npublic void handleReceipt(String receiptId) {\n    this.subscribeLatch.countDown();\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["message"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ConsumerStompMessageHandler","MethodName":"handleMessage","MethodSourceCode":"@Override\npublic void handleMessage(Message<byte[]> message) {\n    if (this.messageCount.incrementAndGet() == this.expectedMessageCount) {\n        this.messageLatch.countDown();\n        this.stompSession.disconnect();\n    }\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"accessor"},{"VariableName":"error"}],"Methodscalled":[],"Parameters":["message"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ConsumerStompMessageHandler","MethodName":"handleError","MethodSourceCode":"@Override\npublic void handleError(Message<byte[]> message) {\n    StompHeaderAccessor accessor = StompHeaderAccessor.wrap(message);\n    String error = \"[Consumer] \" + accessor.getShortLogMessage(message.getPayload());\n    logger.error(error);\n    this.failure.set(new Exception(error));\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ConsumerStompMessageHandler","MethodName":"afterDisconnected","MethodSourceCode":"@Override\npublic void afterDisconnected() {\n    logger.trace(\"Disconnected in \" + this.stompSession);\n    this.disconnectLatch.countDown();\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ConsumerStompMessageHandler","MethodName":"toString","MethodSourceCode":"@Override\npublic String toString() {\n    return \"ConsumerStompMessageHandler[messageCount=\" + this.messageCount + \", \" + this.stompSession + \"]\";\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["messageHandler"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"StompClient","MethodName":"connect","MethodSourceCode":"void connect(StompMessageHandler messageHandler);","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["session","headers"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"StompMessageHandler","MethodName":"afterConnected","MethodSourceCode":"void afterConnected(StompSession session, StompHeaderAccessor headers);","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["message"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"StompMessageHandler","MethodName":"handleMessage","MethodSourceCode":"void handleMessage(Message<byte[]> message);","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["receiptId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"StompMessageHandler","MethodName":"handleReceipt","MethodSourceCode":"void handleReceipt(String receiptId);","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["message"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"StompMessageHandler","MethodName":"handleError","MethodSourceCode":"void handleError(Message<byte[]> message);","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"StompMessageHandler","MethodName":"afterDisconnected","MethodSourceCode":"void afterDisconnected();","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["destination","receiptId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"StompSession","MethodName":"subscribe","MethodSourceCode":"void subscribe(String destination, String receiptId);","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["destination","payload"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"StompSession","MethodName":"send","MethodSourceCode":"void send(String destination, Object payload);","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"StompSession","MethodName":"disconnect","MethodSourceCode":"void disconnect();","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["messageConverter"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"WebSocketStompClient","MethodName":"setMessageConverter","MethodSourceCode":"public void setMessageConverter(MessageConverter messageConverter) {\n    this.messageConverter = messageConverter;\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"webSocketHandler"}],"Methodscalled":[],"Parameters":["stompMessageHandler"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"WebSocketStompClient","MethodName":"connect","MethodSourceCode":"@Override\npublic void connect(StompMessageHandler stompMessageHandler) {\n    try {\n        StompWebSocketHandler webSocketHandler = new StompWebSocketHandler(stompMessageHandler, this.messageConverter);\n        this.webSocketClient.doHandshake(webSocketHandler, this.headers, this.uri).get();\n    } catch (Exception e) {\n        throw new IllegalStateException(e);\n    }\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"headers"},{"VariableName":"message"},{"VariableName":"textMessage"}],"Methodscalled":[],"Parameters":["session"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"WebSocketStompClient","MethodName":"afterConnectionEstablished","MethodSourceCode":"@Override\npublic void afterConnectionEstablished(WebSocketSession session) throws Exception {\n    StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.CONNECT);\n    headers.setAcceptVersion(\"1.1,1.2\");\n    headers.setHeartbeat(0, 0);\n    Message<byte[]> message = MessageBuilder.withPayload(new byte[0]).setHeaders(headers).build();\n    TextMessage textMessage = new TextMessage(new String(this.encoder.encode(message), UTF_8));\n    session.sendMessage(textMessage);\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"payload"},{"VariableName":"messages"},{"VariableName":"message"},{"VariableName":"headers"},{"VariableName":"stompSession"}],"Methodscalled":[],"Parameters":["session","textMessage"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"WebSocketStompClient","MethodName":"handleTextMessage","MethodSourceCode":"@Override\nprotected void handleTextMessage(WebSocketSession session, TextMessage textMessage) throws Exception {\n    ByteBuffer payload = ByteBuffer.wrap(textMessage.getPayload().getBytes(UTF_8));\n    List<Message<byte[]>> messages = this.decoder.decode(payload);\n    for (Message message : messages) {\n        StompHeaderAccessor headers = StompHeaderAccessor.wrap(message);\n        if (StompCommand.CONNECTED.equals(headers.getCommand())) {\n            WebSocketStompSession stompSession = new WebSocketStompSession(session, this.messageConverter);\n            this.stompMessageHandler.afterConnected(stompSession, headers);\n        } else if (StompCommand.MESSAGE.equals(headers.getCommand())) {\n            this.stompMessageHandler.handleMessage(message);\n        } else if (StompCommand.RECEIPT.equals(headers.getCommand())) {\n            this.stompMessageHandler.handleReceipt(headers.getReceiptId());\n        } else if (StompCommand.ERROR.equals(headers.getCommand())) {\n            this.stompMessageHandler.handleError(message);\n        } else if (StompCommand.ERROR.equals(headers.getCommand())) {\n            this.stompMessageHandler.afterDisconnected();\n        } else {\n            logger.debug(\"Unhandled message \" + message);\n        }\n    }\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["session","exception"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"WebSocketStompClient","MethodName":"handleTransportError","MethodSourceCode":"@Override\npublic void handleTransportError(WebSocketSession session, Throwable exception) throws Exception {\n    logger.error(\"WebSocket transport error\", exception);\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["session","status"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"WebSocketStompClient","MethodName":"afterConnectionClosed","MethodSourceCode":"@Override\npublic void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {\n    this.stompMessageHandler.afterDisconnected();\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"headers"}],"Methodscalled":[{"MethodCalled":"sendInternal"}],"Parameters":["destination","receiptId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"WebSocketStompSession","MethodName":"subscribe","MethodSourceCode":"public void subscribe(String destination, String receiptId) {\n    StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.SUBSCRIBE);\n    headers.setSubscriptionId(\"sub\" + this.subscriptionIndex.getAndIncrement());\n    headers.setDestination(destination);\n    if (receiptId != null) {\n        headers.setReceipt(receiptId);\n    }\n    sendInternal(MessageBuilder.withPayload(EMPTY_PAYLOAD).setHeaders(headers).build());\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"headers"}],"Methodscalled":[{"MethodCalled":"sendInternal"}],"Parameters":["destination","payload"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"WebSocketStompSession","MethodName":"send","MethodSourceCode":"public void send(String destination, Object payload) {\n    StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.SEND);\n    headers.setDestination(destination);\n    sendInternal((Message<byte[]>) this.messageConverter.toMessage(payload, new MessageHeaders(headers.toMap())));\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"headers"},{"VariableName":"message"}],"Methodscalled":[{"MethodCalled":"sendInternal"}],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"WebSocketStompSession","MethodName":"disconnect","MethodSourceCode":"public void disconnect() {\n    StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.DISCONNECT);\n    Message<byte[]> message = MessageBuilder.withPayload(EMPTY_PAYLOAD).setHeaders(headers).build();\n    sendInternal(message);\n    try {\n        this.webSocketSession.close();\n    } catch (IOException e) {\n        throw new IllegalStateException(e);\n    }\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"bytes"}],"Methodscalled":[],"Parameters":["message"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"WebSocketStompSession","MethodName":"sendInternal","MethodSourceCode":"private void sendInternal(Message<byte[]> message) {\n    byte[] bytes = this.encoder.encode(message);\n    try {\n        this.webSocketSession.sendMessage(new TextMessage(new String(bytes, UTF_8)));\n    } catch (IOException e) {\n        throw new IllegalStateException(e);\n    }\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[{"MethodCalled":"toString"}],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"WebSocketStompSession","MethodName":"toString","MethodSourceCode":"@Override\npublic String toString() {\n    return this.webSocketSession.toString();\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TestHistoryEvent","MethodName":"getId","MethodSourceCode":"public String getId() {\n    return id;\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["id"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TestHistoryEvent","MethodName":"setId","MethodSourceCode":"public void setId(String id) {\n    this.id = id;\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TestHistoryEvent","MethodName":"getEventType","MethodSourceCode":"public String getEventType() {\n    return eventType;\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["eventType"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TestHistoryEvent","MethodName":"setEventType","MethodSourceCode":"public void setEventType(String eventType) {\n    this.eventType = eventType;\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TestHistoryEvent","MethodName":"getEventData","MethodSourceCode":"public Map<String, Object> getEventData() {\n    return eventData;\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["eventData"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TestHistoryEvent","MethodName":"setEventData","MethodSourceCode":"public void setEventData(Map<String, Object> eventData) {\n    this.eventData = eventData;\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TestHistoryResponse","MethodName":"getData","MethodSourceCode":"public List<TestHistoryEvent> getData() {\n    return data;\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["data"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TestHistoryResponse","MethodName":"setData","MethodSourceCode":"public void setData(List<TestHistoryEvent> data) {\n    this.data = data;\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"headers"},{"VariableName":"failure"},{"VariableName":"transports"},{"VariableName":"handler"},{"VariableName":"stompSession"},{"VariableName":"json"},{"VariableName":"accessor"},{"VariableName":"error"},{"VariableName":"uri"},{"VariableName":"stompClient"}],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration","MethodDeclaration","MethodDeclaration","MethodDeclaration","MethodDeclaration","MethodDeclaration"],"Comments":"","ClassName":"StompListener","MethodName":"initializeStompClient","MethodSourceCode":"private void initializeStompClient() {\n    WebSocketHttpHeaders headers = new WebSocketHttpHeaders();\n    final AtomicReference<Throwable> failure = new AtomicReference<>();\n    List<Transport> transports = new ArrayList<>();\n    transports.add(new WebSocketTransport(new StandardWebSocketClient()));\n    transports.add(new RestTemplateXhrTransport(new RestTemplate()));\n    StompMessageHandler handler = new StompMessageHandler() {\n\n        private StompSession stompSession;\n\n        @Override\n        public void afterConnected(StompSession stompSession, StompHeaderAccessor headers) {\n            this.stompSession = stompSession;\n            this.stompSession.subscribe(destination, null);\n        }\n\n        @Override\n        public void handleMessage(Message<byte[]> message) {\n            String json = new String(message.getPayload());\n            try {\n                events.add(mapper.readValue(json, KanbanWebSocketEvent.class));\n            } catch (IOException e) {\n                new RuntimeException(e);\n            }\n        }\n\n        @Override\n        public void handleError(Message<byte[]> message) {\n            StompHeaderAccessor accessor = StompHeaderAccessor.wrap(message);\n            String error = \"[Producer] \" + accessor.getShortLogMessage(message.getPayload());\n            log.error(error);\n            failure.set(new Exception(error));\n        }\n\n        @Override\n        public void handleReceipt(String receiptId) {\n        }\n\n        @Override\n        public void afterDisconnected() {\n        }\n    };\n    try {\n        URI uri = new URI(\"http://\" + host + \":\" + port + \"/events\");\n        WebSocketStompClient stompClient = new WebSocketStompClient(uri, headers, new SockJsClient(transports));\n        stompClient.setMessageConverter(new MappingJackson2MessageConverter());\n        headers.add(\"x-access-token\", token);\n        stompClient.connect(handler);\n        try {\n            Thread.sleep(500);\n        } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n        }\n    } catch (URISyntaxException e) {\n        throw new RuntimeException(e);\n    }\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["stompSession","headers"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"StompListener","MethodName":"afterConnected","MethodSourceCode":"@Override\npublic void afterConnected(StompSession stompSession, StompHeaderAccessor headers) {\n    this.stompSession = stompSession;\n    this.stompSession.subscribe(destination, null);\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"json"}],"Methodscalled":[],"Parameters":["message"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"StompListener","MethodName":"handleMessage","MethodSourceCode":"@Override\npublic void handleMessage(Message<byte[]> message) {\n    String json = new String(message.getPayload());\n    try {\n        events.add(mapper.readValue(json, KanbanWebSocketEvent.class));\n    } catch (IOException e) {\n        new RuntimeException(e);\n    }\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"accessor"},{"VariableName":"error"}],"Methodscalled":[],"Parameters":["message"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"StompListener","MethodName":"handleError","MethodSourceCode":"@Override\npublic void handleError(Message<byte[]> message) {\n    StompHeaderAccessor accessor = StompHeaderAccessor.wrap(message);\n    String error = \"[Producer] \" + accessor.getShortLogMessage(message.getPayload());\n    log.error(error);\n    failure.set(new Exception(error));\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["receiptId"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"StompListener","MethodName":"handleReceipt","MethodSourceCode":"@Override\npublic void handleReceipt(String receiptId) {\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"StompListener","MethodName":"afterDisconnected","MethodSourceCode":"@Override\npublic void afterDisconnected() {\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":[],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"StompListener","MethodName":"getEvents","MethodSourceCode":"public List<KanbanWebSocketEvent> getEvents() {\n    return events;\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["func","predicate"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TestUtil","MethodName":"awaitPredicatePasses","MethodSourceCode":"public static <T> T awaitPredicatePasses(Func1<Long, T> func, Func1<T, Boolean> predicate) {\n    try {\n        return Observable.interval(400, TimeUnit.MILLISECONDS).take(50).map(func).filter(predicate).toBlocking().first();\n    } catch (Exception e) {\n        // Rx Java throws an exception with a stack trace from a different thread\n        // https://github.com/ReactiveX/RxJava/issues/3558\n        throw new RuntimeException(e);\n    }\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["func"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"TestUtil","MethodName":"awaitSuccessfulRequest","MethodSourceCode":"public static String awaitSuccessfulRequest(Supplier<HttpResponse> func) {\n    try {\n        return EntityUtils.toString(Observable.interval(400, TimeUnit.MILLISECONDS).take(50).map(x -> func.get()).filter(httpResp -> httpResp.getStatusLine().getStatusCode() == HttpStatus.OK.value() && httpResp.getEntity() != null).toBlocking().first().getEntity());\n    } catch (Exception e) {\n        throw new RuntimeException(e);\n    }\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["jsonText"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ValidationUtils","MethodName":"getJsonNode","MethodSourceCode":"public static JsonNode getJsonNode(String jsonText) throws IOException {\n    return JsonLoader.fromString(jsonText);\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["jsonFile"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ValidationUtils","MethodName":"getJsonNode","MethodSourceCode":"public static JsonNode getJsonNode(File jsonFile) throws IOException {\n    return JsonLoader.fromFile(jsonFile);\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["url"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ValidationUtils","MethodName":"getJsonNode","MethodSourceCode":"public static JsonNode getJsonNode(URL url) throws IOException {\n    return JsonLoader.fromURL(url);\n}","Folder":"test-utils"},{"Variables":[],"Methodscalled":[],"Parameters":["resource"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ValidationUtils","MethodName":"getJsonNodeFromResource","MethodSourceCode":"public static JsonNode getJsonNodeFromResource(String resource) throws IOException {\n    return JsonLoader.fromResource(resource);\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"schemaNode"}],"Methodscalled":[{"MethodCalled":"getJsonNode"},{"MethodCalled":"_getSchemaNode"}],"Parameters":["schemaText"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ValidationUtils","MethodName":"getSchemaNode","MethodSourceCode":"public static JsonSchema getSchemaNode(String schemaText) throws IOException, ProcessingException {\n    final JsonNode schemaNode = getJsonNode(schemaText);\n    return _getSchemaNode(schemaNode);\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"schemaNode"}],"Methodscalled":[{"MethodCalled":"getJsonNode"},{"MethodCalled":"_getSchemaNode"}],"Parameters":["schemaFile"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ValidationUtils","MethodName":"getSchemaNode","MethodSourceCode":"public static JsonSchema getSchemaNode(File schemaFile) throws IOException, ProcessingException {\n    final JsonNode schemaNode = getJsonNode(schemaFile);\n    return _getSchemaNode(schemaNode);\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"schemaNode"}],"Methodscalled":[{"MethodCalled":"getJsonNode"},{"MethodCalled":"_getSchemaNode"}],"Parameters":["schemaFile"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ValidationUtils","MethodName":"getSchemaNode","MethodSourceCode":"public static JsonSchema getSchemaNode(URL schemaFile) throws IOException, ProcessingException {\n    final JsonNode schemaNode = getJsonNode(schemaFile);\n    return _getSchemaNode(schemaNode);\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"schemaNode"}],"Methodscalled":[{"MethodCalled":"getJsonNodeFromResource"},{"MethodCalled":"_getSchemaNode"}],"Parameters":["resource"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ValidationUtils","MethodName":"getSchemaNodeFromResource","MethodSourceCode":"public static JsonSchema getSchemaNodeFromResource(String resource) throws IOException, ProcessingException {\n    final JsonNode schemaNode = getJsonNodeFromResource(resource);\n    return _getSchemaNode(schemaNode);\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"report"},{"VariableName":"processingMessage"}],"Methodscalled":[],"Parameters":["jsonSchemaNode","jsonNode"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ValidationUtils","MethodName":"validateJson","MethodSourceCode":"public static void validateJson(JsonSchema jsonSchemaNode, JsonNode jsonNode) throws ProcessingException {\n    ProcessingReport report = jsonSchemaNode.validate(jsonNode);\n    if (!report.isSuccess()) {\n        for (ProcessingMessage processingMessage : report) {\n            throw new ProcessingException(processingMessage);\n        }\n    }\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"report"}],"Methodscalled":[],"Parameters":["jsonSchemaNode","jsonNode"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ValidationUtils","MethodName":"isJsonValid","MethodSourceCode":"public static boolean isJsonValid(JsonSchema jsonSchemaNode, JsonNode jsonNode) throws ProcessingException {\n    ProcessingReport report = jsonSchemaNode.validate(jsonNode);\n    return report.isSuccess();\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"schemaNode"},{"VariableName":"jsonNode"}],"Methodscalled":[{"MethodCalled":"getSchemaNode"},{"MethodCalled":"getJsonNode"},{"MethodCalled":"isJsonValid"}],"Parameters":["schemaText","jsonText"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ValidationUtils","MethodName":"isJsonValid","MethodSourceCode":"public static boolean isJsonValid(String schemaText, String jsonText) throws ProcessingException, IOException {\n    final JsonSchema schemaNode = getSchemaNode(schemaText);\n    final JsonNode jsonNode = getJsonNode(jsonText);\n    return isJsonValid(schemaNode, jsonNode);\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"schemaNode"},{"VariableName":"jsonNode"}],"Methodscalled":[{"MethodCalled":"getSchemaNode"},{"MethodCalled":"getJsonNode"},{"MethodCalled":"isJsonValid"}],"Parameters":["schemaFile","jsonFile"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ValidationUtils","MethodName":"isJsonValid","MethodSourceCode":"public static boolean isJsonValid(File schemaFile, File jsonFile) throws ProcessingException, IOException {\n    final JsonSchema schemaNode = getSchemaNode(schemaFile);\n    final JsonNode jsonNode = getJsonNode(jsonFile);\n    return isJsonValid(schemaNode, jsonNode);\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"schemaNode"},{"VariableName":"jsonNode"}],"Methodscalled":[{"MethodCalled":"getSchemaNode"},{"MethodCalled":"getJsonNode"},{"MethodCalled":"isJsonValid"}],"Parameters":["schemaURL","jsonURL"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ValidationUtils","MethodName":"isJsonValid","MethodSourceCode":"public static boolean isJsonValid(URL schemaURL, URL jsonURL) throws ProcessingException, IOException {\n    final JsonSchema schemaNode = getSchemaNode(schemaURL);\n    final JsonNode jsonNode = getJsonNode(jsonURL);\n    return isJsonValid(schemaNode, jsonNode);\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"schemaNode"},{"VariableName":"jsonNode"}],"Methodscalled":[{"MethodCalled":"getSchemaNode"},{"MethodCalled":"getJsonNode"},{"MethodCalled":"validateJson"}],"Parameters":["schemaText","jsonText"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ValidationUtils","MethodName":"validateJson","MethodSourceCode":"public static void validateJson(String schemaText, String jsonText) throws IOException, ProcessingException {\n    final JsonSchema schemaNode = getSchemaNode(schemaText);\n    final JsonNode jsonNode = getJsonNode(jsonText);\n    validateJson(schemaNode, jsonNode);\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"schemaNode"},{"VariableName":"jsonNode"}],"Methodscalled":[{"MethodCalled":"getSchemaNode"},{"MethodCalled":"getJsonNode"},{"MethodCalled":"validateJson"}],"Parameters":["schemaFile","jsonFile"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ValidationUtils","MethodName":"validateJson","MethodSourceCode":"public static void validateJson(File schemaFile, File jsonFile) throws IOException, ProcessingException {\n    final JsonSchema schemaNode = getSchemaNode(schemaFile);\n    final JsonNode jsonNode = getJsonNode(jsonFile);\n    validateJson(schemaNode, jsonNode);\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"schemaNode"},{"VariableName":"jsonNode"}],"Methodscalled":[{"MethodCalled":"getSchemaNode"},{"MethodCalled":"getJsonNode"},{"MethodCalled":"validateJson"}],"Parameters":["schemaDocument","jsonDocument"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ValidationUtils","MethodName":"validateJson","MethodSourceCode":"public static void validateJson(URL schemaDocument, URL jsonDocument) throws IOException, ProcessingException {\n    final JsonSchema schemaNode = getSchemaNode(schemaDocument);\n    final JsonNode jsonNode = getJsonNode(jsonDocument);\n    validateJson(schemaNode, jsonNode);\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"schemaNode"},{"VariableName":"jsonNode"}],"Methodscalled":[{"MethodCalled":"getSchemaNode"},{"MethodCalled":"getJsonNodeFromResource"},{"MethodCalled":"validateJson"}],"Parameters":["schemaResource","jsonResource"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ValidationUtils","MethodName":"validateJsonResource","MethodSourceCode":"public static void validateJsonResource(String schemaResource, String jsonResource) throws IOException, ProcessingException {\n    final JsonSchema schemaNode = getSchemaNode(schemaResource);\n    final JsonNode jsonNode = getJsonNodeFromResource(jsonResource);\n    validateJson(schemaNode, jsonNode);\n}","Folder":"test-utils"},{"Variables":[{"VariableName":"schemaIdentifier"},{"VariableName":"factory"}],"Methodscalled":[],"Parameters":["jsonNode"],"ASTFeatures":["MethodDeclaration"],"Comments":"","ClassName":"ValidationUtils","MethodName":"_getSchemaNode","MethodSourceCode":"private static JsonSchema _getSchemaNode(JsonNode jsonNode) throws ProcessingException {\n    final JsonNode schemaIdentifier = jsonNode.get(JSON_SCHEMA_IDENTIFIER_ELEMENT);\n    if (null == schemaIdentifier) {\n        ((ObjectNode) jsonNode).put(JSON_SCHEMA_IDENTIFIER_ELEMENT, JSON_V4_SCHEMA_IDENTIFIER);\n    }\n    final JsonSchemaFactory factory = JsonSchemaFactory.byDefault();\n    return factory.getJsonSchema(jsonNode);\n}","Folder":"test-utils"}]}